
Self_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080064d8  080064d8  000164d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  08006550  08006550  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006550  08006550  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08006558  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000138  08006690  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006690  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5b  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ed1  00000000  00000000  0002ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00030a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017814  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb37  00000000  00000000  0004a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c536  00000000  00000000  00055beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004634  00000000  00000000  000e219c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000138 	.word	0x20000138
 800012c:	00000000 	.word	0x00000000
 8000130:	080064c0 	.word	0x080064c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000013c 	.word	0x2000013c
 800014c:	080064c0 	.word	0x080064c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d102      	bne.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
	}
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	20000154 	.word	0x20000154
 80010dc:	00000000 	.word	0x00000000

080010e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_UART_RxCpltCallback+0x1b8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	f040 80bf 	bne.w	8001272 <HAL_UART_RxCpltCallback+0x192>
		if(u8_rx_data == 'P'){
 80010f4:	4b69      	ldr	r3, [pc, #420]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b50      	cmp	r3, #80	; 0x50
 80010fa:	d112      	bne.n	8001122 <HAL_UART_RxCpltCallback+0x42>
			t_pid.f_Kp += 0.001;
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f989 	bl	8000418 <__aeabi_f2d>
 8001106:	a35e      	add	r3, pc, #376	; (adr r3, 8001280 <HAL_UART_RxCpltCallback+0x1a0>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f826 	bl	800015c <__adddf3>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f7ff fc86 	bl	8000a28 <__aeabi_d2f>
 800111c:	4602      	mov	r2, r0
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001120:	601a      	str	r2, [r3, #0]
		}
		if(u8_rx_data == 'p'){
 8001122:	4b5e      	ldr	r3, [pc, #376]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b70      	cmp	r3, #112	; 0x70
 8001128:	d112      	bne.n	8001150 <HAL_UART_RxCpltCallback+0x70>
			t_pid.f_Kp -= 0.001;
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f972 	bl	8000418 <__aeabi_f2d>
 8001134:	a352      	add	r3, pc, #328	; (adr r3, 8001280 <HAL_UART_RxCpltCallback+0x1a0>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f80d 	bl	8000158 <__aeabi_dsub>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4618      	mov	r0, r3
 8001144:	4621      	mov	r1, r4
 8001146:	f7ff fc6f 	bl	8000a28 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 800114e:	601a      	str	r2, [r3, #0]
		}
		if(u8_rx_data == 'I'){
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b49      	cmp	r3, #73	; 0x49
 8001156:	d112      	bne.n	800117e <HAL_UART_RxCpltCallback+0x9e>
			t_pid.f_Ki += 0.000001;
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f95b 	bl	8000418 <__aeabi_f2d>
 8001162:	a349      	add	r3, pc, #292	; (adr r3, 8001288 <HAL_UART_RxCpltCallback+0x1a8>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7fe fff8 	bl	800015c <__adddf3>
 800116c:	4603      	mov	r3, r0
 800116e:	460c      	mov	r4, r1
 8001170:	4618      	mov	r0, r3
 8001172:	4621      	mov	r1, r4
 8001174:	f7ff fc58 	bl	8000a28 <__aeabi_d2f>
 8001178:	4602      	mov	r2, r0
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 800117c:	605a      	str	r2, [r3, #4]
		}
		if(u8_rx_data == 'i'){
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b69      	cmp	r3, #105	; 0x69
 8001184:	d112      	bne.n	80011ac <HAL_UART_RxCpltCallback+0xcc>
			t_pid.f_Ki -= 0.000001;
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f944 	bl	8000418 <__aeabi_f2d>
 8001190:	a33d      	add	r3, pc, #244	; (adr r3, 8001288 <HAL_UART_RxCpltCallback+0x1a8>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7fe ffdf 	bl	8000158 <__aeabi_dsub>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	f7ff fc41 	bl	8000a28 <__aeabi_d2f>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 80011aa:	605a      	str	r2, [r3, #4]
		}
		if(u8_rx_data == 'D'){
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b44      	cmp	r3, #68	; 0x44
 80011b2:	d112      	bne.n	80011da <HAL_UART_RxCpltCallback+0xfa>
			t_pid.f_Kd += 0.0001;
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f92d 	bl	8000418 <__aeabi_f2d>
 80011be:	a334      	add	r3, pc, #208	; (adr r3, 8001290 <HAL_UART_RxCpltCallback+0x1b0>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7fe ffca 	bl	800015c <__adddf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	f7ff fc2a 	bl	8000a28 <__aeabi_d2f>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 80011d8:	609a      	str	r2, [r3, #8]
		}
		if(u8_rx_data == 'd'){
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d112      	bne.n	8001208 <HAL_UART_RxCpltCallback+0x128>
			t_pid.f_Kd -= 0.0001;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f916 	bl	8000418 <__aeabi_f2d>
 80011ec:	a328      	add	r3, pc, #160	; (adr r3, 8001290 <HAL_UART_RxCpltCallback+0x1b0>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7fe ffb1 	bl	8000158 <__aeabi_dsub>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4618      	mov	r0, r3
 80011fc:	4621      	mov	r1, r4
 80011fe:	f7ff fc13 	bl	8000a28 <__aeabi_d2f>
 8001202:	4602      	mov	r2, r0
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001206:	609a      	str	r2, [r3, #8]
		}
		if(u8_rx_data == 'O'){
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b4f      	cmp	r3, #79	; 0x4f
 800120e:	d10a      	bne.n	8001226 <HAL_UART_RxCpltCallback+0x146>
			t_pid.f_setpoint += 0.5;
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc5b 	bl	8000ad4 <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		if(u8_rx_data == 'o'){
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b6f      	cmp	r3, #111	; 0x6f
 800122c:	d10a      	bne.n	8001244 <HAL_UART_RxCpltCallback+0x164>
			t_pid.f_setpoint -= 0.5;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc4a 	bl	8000ad0 <__aeabi_fsub>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_UART_RxCpltCallback+0x1c0>)
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		if(u8_rx_data == '0'){
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b30      	cmp	r3, #48	; 0x30
 800124a:	d104      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x176>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2108      	movs	r1, #8
 8001250:	4814      	ldr	r0, [pc, #80]	; (80012a4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001252:	f001 f815 	bl	8002280 <HAL_GPIO_WritePin>
		}
		if(u8_rx_data == '1'){
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b31      	cmp	r3, #49	; 0x31
 800125c:	d104      	bne.n	8001268 <HAL_UART_RxCpltCallback+0x188>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2108      	movs	r1, #8
 8001262:	4810      	ldr	r0, [pc, #64]	; (80012a4 <HAL_UART_RxCpltCallback+0x1c4>)
 8001264:	f001 f80c 	bl	8002280 <HAL_GPIO_WritePin>

		}
		HAL_UART_Receive_IT(&huart1,&u8_rx_data,1);
 8001268:	2201      	movs	r2, #1
 800126a:	490c      	ldr	r1, [pc, #48]	; (800129c <HAL_UART_RxCpltCallback+0x1bc>)
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <HAL_UART_RxCpltCallback+0x1c8>)
 800126e:	f003 fbc0 	bl	80049f2 <HAL_UART_Receive_IT>
	}

}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	d2f1a9fc 	.word	0xd2f1a9fc
 8001284:	3f50624d 	.word	0x3f50624d
 8001288:	a0b5ed8d 	.word	0xa0b5ed8d
 800128c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001290:	eb1c432d 	.word	0xeb1c432d
 8001294:	3f1a36e2 	.word	0x3f1a36e2
 8001298:	40013800 	.word	0x40013800
 800129c:	20000158 	.word	0x20000158
 80012a0:	20000000 	.word	0x20000000
 80012a4:	40010800 	.word	0x40010800
 80012a8:	20000298 	.word	0x20000298

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b598      	push	{r3, r4, r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fc6c 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f852 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 f9fc 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012bc:	f000 f88a 	bl	80013d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012c0:	f000 f8b6 	bl	8001430 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012c4:	f000 f904 	bl	80014d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c8:	f000 f966 	bl	8001598 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80012cc:	f000 f9c8 	bl	8001660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&u8_rx_data,1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	491a      	ldr	r1, [pc, #104]	; (800133c <main+0x90>)
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <main+0x94>)
 80012d6:	f003 fb8c 	bl	80049f2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80012da:	481a      	ldr	r0, [pc, #104]	; (8001344 <main+0x98>)
 80012dc:	f002 fc42 	bl	8003b64 <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 80012e0:	f003 ffd0 	bl	8005284 <Init_tim_pwm>

  while (MPU6050_Init(&hi2c1) == 1);
 80012e4:	bf00      	nop
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <main+0x9c>)
 80012e8:	f004 f9af 	bl	800564a <MPU6050_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d0f9      	beq.n	80012e6 <main+0x3a>

  Reset_PID(&t_pid);
 80012f2:	4816      	ldr	r0, [pc, #88]	; (800134c <main+0xa0>)
 80012f4:	f004 f980 	bl	80055f8 <Reset_PID>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (u8_flag_10ms)
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <main+0xa4>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0fb      	beq.n	80012f8 <main+0x4c>
	  {
		  u8_flag_10ms = 0;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <main+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		  MPU6050_Read_All(&hi2c1,&t_MPU6050);
 8001306:	4913      	ldr	r1, [pc, #76]	; (8001354 <main+0xa8>)
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <main+0x9c>)
 800130a:	f004 f9f5 	bl	80056f8 <MPU6050_Read_All>
		  d_angle = t_MPU6050.KalmanAngleY;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <main+0xa8>)
 8001310:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001314:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <main+0xac>)
 800131a:	e9c2 3400 	strd	r3, r4, [r2]
		  PID_controller(d_angle,&t_pid);
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <main+0xac>)
 8001320:	cb18      	ldmia	r3, {r3, r4}
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <main+0xa0>)
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	f004 f828 	bl	800537c <PID_controller>
		  Control_motor(d_angle,&t_pid);
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <main+0xac>)
 800132e:	cb18      	ldmia	r3, {r3, r4}
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <main+0xa0>)
 8001332:	4618      	mov	r0, r3
 8001334:	4621      	mov	r1, r4
 8001336:	f004 f8f7 	bl	8005528 <Control_motor>
	  if (u8_flag_10ms)
 800133a:	e7dd      	b.n	80012f8 <main+0x4c>
 800133c:	20000158 	.word	0x20000158
 8001340:	20000298 	.word	0x20000298
 8001344:	200002e8 	.word	0x200002e8
 8001348:	200001a4 	.word	0x200001a4
 800134c:	20000000 	.word	0x20000000
 8001350:	20000154 	.word	0x20000154
 8001354:	20000240 	.word	0x20000240
 8001358:	200002e0 	.word	0x200002e0

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	; 0x40
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	2228      	movs	r2, #40	; 0x28
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fd2e 	bl	8005dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001386:	2310      	movs	r3, #16
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ff7a 	bl	800328c <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800139e:	f000 f9f5 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f9e6 	bl	800378c <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f9e1 	bl	800178c <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3740      	adds	r7, #64	; 0x40
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_I2C1_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_I2C1_Init+0x58>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_I2C1_Init+0x50>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_I2C1_Init+0x50>)
 8001412:	f000 ff4d 	bl	80022b0 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f9b6 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001a4 	.word	0x200001a4
 8001428:	40005400 	.word	0x40005400
 800142c:	000186a0 	.word	0x000186a0

08001430 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_TIM1_Init+0x98>)
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <MX_TIM1_Init+0x9c>)
 8001450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001454:	f240 321f 	movw	r2, #799	; 0x31f
 8001458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001462:	2263      	movs	r2, #99	; 0x63
 8001464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM1_Init+0x98>)
 800147a:	f002 fb23 	bl	8003ac4 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001484:	f000 f982 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM1_Init+0x98>)
 8001496:	f002 fe6f 	bl	8004178 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014a0:	f000 f974 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM1_Init+0x98>)
 80014b2:	f003 f9e1 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014bc:	f000 f966 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200002e8 	.word	0x200002e8
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <MX_TIM3_Init+0xc0>)
 80014f4:	4a27      	ldr	r2, [pc, #156]	; (8001594 <MX_TIM3_Init+0xc4>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_TIM3_Init+0xc0>)
 80014fa:	224f      	movs	r2, #79	; 0x4f
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001506:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_TIM3_Init+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001518:	481d      	ldr	r0, [pc, #116]	; (8001590 <MX_TIM3_Init+0xc0>)
 800151a:	f002 fb75 	bl	8003c08 <HAL_TIM_PWM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001524:	f000 f932 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4619      	mov	r1, r3
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001538:	f003 f99e 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001542:	f000 f923 	bl	800178c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_TIM3_Init+0xc0>)
 800155e:	f002 fd4d 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001568:	f000 f910 	bl	800178c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2204      	movs	r2, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001574:	f002 fd42 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800157e:	f000 f905 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <MX_TIM3_Init+0xc0>)
 8001584:	f000 f9e0 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f8 	.word	0x200001f8
 8001594:	40000400 	.word	0x40000400

08001598 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <MX_TIM4_Init+0xc4>)
 80015be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015c2:	224f      	movs	r2, #79	; 0x4f
 80015c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015e0:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_TIM4_Init+0xc0>)
 80015e2:	f002 fb11 	bl	8003c08 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 f8ce 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4619      	mov	r1, r3
 80015fe:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_TIM4_Init+0xc0>)
 8001600:	f003 f93a 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800160a:	f000 f8bf 	bl	800178c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM4_Init+0xc0>)
 8001626:	f002 fce9 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001630:	f000 f8ac 	bl	800178c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2204      	movs	r2, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM4_Init+0xc0>)
 800163c:	f002 fcde 	bl	8003ffc <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001646:	f000 f8a1 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM4_Init+0xc0>)
 800164c:	f000 f97c 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000015c 	.word	0x2000015c
 800165c:	40000800 	.word	0x40000800

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f003 f95e 	bl	8004958 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f873 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000298 	.word	0x20000298
 80016b0:	40013800 	.word	0x40013800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <MX_GPIO_Init+0xcc>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_GPIO_Init+0xcc>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_GPIO_Init+0xcc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <MX_GPIO_Init+0xcc>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_GPIO_Init+0xcc>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <MX_GPIO_Init+0xd0>)
 8001730:	f000 fda6 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2128      	movs	r1, #40	; 0x28
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <MX_GPIO_Init+0xd4>)
 800173a:	f000 fda1 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <MX_GPIO_Init+0xd0>)
 8001758:	f000 fc38 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800175c:	2328      	movs	r3, #40	; 0x28
 800175e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2302      	movs	r3, #2
 800176a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_GPIO_Init+0xd4>)
 8001774:	f000 fc2a 	bl	8001fcc <HAL_GPIO_Init>

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	40011000 	.word	0x40011000
 8001788:	40010800 	.word	0x40010800

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001792:	e7fe      	b.n	8001792 <Error_Handler+0x6>

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_MspInit+0x60>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_MspInit+0x60>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000

080017f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_I2C_MspInit+0x90>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d132      	bne.n	800187e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_I2C_MspInit+0x94>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_I2C_MspInit+0x94>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4812      	ldr	r0, [pc, #72]	; (8001890 <HAL_I2C_MspInit+0x98>)
 8001846:	f000 fbc1 	bl	8001fcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_I2C_MspInit+0x9c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_I2C_MspInit+0x9c>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_I2C_MspInit+0x94>)
 800186c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40005400 	.word	0x40005400
 800188c:	40021000 	.word	0x40021000
 8001890:	40010c00 	.word	0x40010c00
 8001894:	40010000 	.word	0x40010000

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_TIM_Base_MspInit+0x44>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d113      	bne.n	80018d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_TIM_Base_MspInit+0x48>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_TIM_Base_MspInit+0x48>)
 80018b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_TIM_Base_MspInit+0x48>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2019      	movs	r0, #25
 80018c8:	f000 fa99 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018cc:	2019      	movs	r0, #25
 80018ce:	f000 fab2 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_TIM_PWM_MspInit+0x58>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10c      	bne.n	8001910 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800190e:	e010      	b.n	8001932 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_TIM_PWM_MspInit+0x60>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10b      	bne.n	8001932 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_TIM_PWM_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40000400 	.word	0x40000400
 8001940:	40021000 	.word	0x40021000
 8001944:	40000800 	.word	0x40000800

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_TIM_MspPostInit+0xb8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d12a      	bne.n	80019be <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 800196e:	f043 0308 	orr.w	r3, r3, #8
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	481d      	ldr	r0, [pc, #116]	; (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 8001994:	f000 fb1a 	bl	8001fcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_TIM_MspPostInit+0xc4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_TIM_MspPostInit+0xc4>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019bc:	e01c      	b.n	80019f8 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_TIM_MspPostInit+0xc8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d117      	bne.n	80019f8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 80019f4:	f000 faea 	bl	8001fcc <HAL_GPIO_Init>
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40000800 	.word	0x40000800

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_UART_MspInit+0x9c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d139      	bne.n	8001aa8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_UART_MspInit+0xa4>)
 8001a7a:	f000 faa7 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_UART_MspInit+0xa4>)
 8001a94:	f000 fa9a 	bl	8001fcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2025      	movs	r0, #37	; 0x25
 8001a9e:	f000 f9ae 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa2:	2025      	movs	r0, #37	; 0x25
 8001aa4:	f000 f9c7 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010800 	.word	0x40010800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f000 f889 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM1_UP_IRQHandler+0x10>)
 8001b12:	f002 f96b 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002e8 	.word	0x200002e8

08001b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART1_IRQHandler+0x10>)
 8001b26:	f002 ff95 	bl	8004a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000298 	.word	0x20000298

08001b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b66:	f7ff ffe5 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f004 f90b 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7ff fb9d 	bl	80012ac <main>
  bx lr
 8001b72:	4770      	bx	lr
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001b7c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8001b80:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001b84:	20000338 	.word	0x20000338

08001b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x28>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x28>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f923 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fdf4 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f93b 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f903 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000030 	.word	0x20000030
 8001c10:	20000038 	.word	0x20000038
 8001c14:	20000034 	.word	0x20000034

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000038 	.word	0x20000038
 8001c38:	20000330 	.word	0x20000330

08001c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000330 	.word	0x20000330

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff42 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff90 	bl	8001d40 <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5f 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff35 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e020      	b.n	8001ed4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 020e 	bic.w	r2, r2, #14
 8001ea0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d005      	beq.n	8001f02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e051      	b.n	8001fa6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 020e 	bic.w	r2, r2, #14
 8001f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_DMA_Abort_IT+0xd0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d029      	beq.n	8001f80 <HAL_DMA_Abort_IT+0xa0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_DMA_Abort_IT+0xd4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x9c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_DMA_Abort_IT+0xd8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01a      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x96>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_DMA_Abort_IT+0xdc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d012      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x90>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_DMA_Abort_IT+0xe0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00a      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x8a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_DMA_Abort_IT+0xe4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d102      	bne.n	8001f64 <HAL_DMA_Abort_IT+0x84>
 8001f5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f62:	e00e      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f68:	e00b      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6e:	e008      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	e005      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	e002      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_DMA_Abort_IT+0xe8>)
 8001f84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
    } 
  }
  return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40020008 	.word	0x40020008
 8001fb4:	4002001c 	.word	0x4002001c
 8001fb8:	40020030 	.word	0x40020030
 8001fbc:	40020044 	.word	0x40020044
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	4002006c 	.word	0x4002006c
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e127      	b.n	8002230 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8116 	bne.w	800222a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b12      	cmp	r3, #18
 8002004:	d034      	beq.n	8002070 <HAL_GPIO_Init+0xa4>
 8002006:	2b12      	cmp	r3, #18
 8002008:	d80d      	bhi.n	8002026 <HAL_GPIO_Init+0x5a>
 800200a:	2b02      	cmp	r3, #2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x9a>
 800200e:	2b02      	cmp	r3, #2
 8002010:	d804      	bhi.n	800201c <HAL_GPIO_Init+0x50>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d031      	beq.n	800207a <HAL_GPIO_Init+0xae>
 8002016:	2b01      	cmp	r3, #1
 8002018:	d01c      	beq.n	8002054 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201a:	e048      	b.n	80020ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800201c:	2b03      	cmp	r3, #3
 800201e:	d043      	beq.n	80020a8 <HAL_GPIO_Init+0xdc>
 8002020:	2b11      	cmp	r3, #17
 8002022:	d01b      	beq.n	800205c <HAL_GPIO_Init+0x90>
          break;
 8002024:	e043      	b.n	80020ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002026:	4a89      	ldr	r2, [pc, #548]	; (800224c <HAL_GPIO_Init+0x280>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d026      	beq.n	800207a <HAL_GPIO_Init+0xae>
 800202c:	4a87      	ldr	r2, [pc, #540]	; (800224c <HAL_GPIO_Init+0x280>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d806      	bhi.n	8002040 <HAL_GPIO_Init+0x74>
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_GPIO_Init+0x284>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d020      	beq.n	800207a <HAL_GPIO_Init+0xae>
 8002038:	4a86      	ldr	r2, [pc, #536]	; (8002254 <HAL_GPIO_Init+0x288>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01d      	beq.n	800207a <HAL_GPIO_Init+0xae>
          break;
 800203e:	e036      	b.n	80020ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002040:	4a85      	ldr	r2, [pc, #532]	; (8002258 <HAL_GPIO_Init+0x28c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0xae>
 8002046:	4a85      	ldr	r2, [pc, #532]	; (800225c <HAL_GPIO_Init+0x290>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d016      	beq.n	800207a <HAL_GPIO_Init+0xae>
 800204c:	4a84      	ldr	r2, [pc, #528]	; (8002260 <HAL_GPIO_Init+0x294>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xae>
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e028      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e023      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01e      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e019      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e012      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e008      	b.n	80020ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2bff      	cmp	r3, #255	; 0xff
 80020b2:	d801      	bhi.n	80020b8 <HAL_GPIO_Init+0xec>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	e001      	b.n	80020bc <HAL_GPIO_Init+0xf0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2bff      	cmp	r3, #255	; 0xff
 80020c2:	d802      	bhi.n	80020ca <HAL_GPIO_Init+0xfe>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x104>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3b08      	subs	r3, #8
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	210f      	movs	r1, #15
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	6a39      	ldr	r1, [r7, #32]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	431a      	orrs	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8096 	beq.w	800222a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020fe:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_GPIO_Init+0x298>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_GPIO_Init+0x298>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6193      	str	r3, [r2, #24]
 800210a:	4b56      	ldr	r3, [pc, #344]	; (8002264 <HAL_GPIO_Init+0x298>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002116:	4a54      	ldr	r2, [pc, #336]	; (8002268 <HAL_GPIO_Init+0x29c>)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_GPIO_Init+0x2a0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x19e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x2a4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x19a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_GPIO_Init+0x2a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x196>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x192>
 800215a:	2303      	movs	r3, #3
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x1a0>
 800215e:	2304      	movs	r3, #4
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x1a0>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x1a0>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x1a0>
 800216a:	2300      	movs	r3, #0
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800217c:	493a      	ldr	r1, [pc, #232]	; (8002268 <HAL_GPIO_Init+0x29c>)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4938      	ldr	r1, [pc, #224]	; (800227c <HAL_GPIO_Init+0x2b0>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4933      	ldr	r1, [pc, #204]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	492e      	ldr	r1, [pc, #184]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4929      	ldr	r1, [pc, #164]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4924      	ldr	r1, [pc, #144]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	491f      	ldr	r1, [pc, #124]	; (800227c <HAL_GPIO_Init+0x2b0>)
 80021fe:	4013      	ands	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	491a      	ldr	r1, [pc, #104]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]
 800221a:	e006      	b.n	800222a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_GPIO_Init+0x2b0>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	43db      	mvns	r3, r3
 8002224:	4915      	ldr	r1, [pc, #84]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002226:	4013      	ands	r3, r2
 8002228:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	3301      	adds	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f aed0 	bne.w	8001fe0 <HAL_GPIO_Init+0x14>
  }
}
 8002240:	bf00      	nop
 8002242:	372c      	adds	r7, #44	; 0x2c
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	10210000 	.word	0x10210000
 8002250:	10110000 	.word	0x10110000
 8002254:	10120000 	.word	0x10120000
 8002258:	10310000 	.word	0x10310000
 800225c:	10320000 	.word	0x10320000
 8002260:	10220000 	.word	0x10220000
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00
 8002274:	40011000 	.word	0x40011000
 8002278:	40011400 	.word	0x40011400
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e11f      	b.n	8002502 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fa8e 	bl	80017f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002314:	f001 fb90 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a7b      	ldr	r2, [pc, #492]	; (800250c <HAL_I2C_Init+0x25c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d807      	bhi.n	8002334 <HAL_I2C_Init+0x84>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7a      	ldr	r2, [pc, #488]	; (8002510 <HAL_I2C_Init+0x260>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e006      	b.n	8002342 <HAL_I2C_Init+0x92>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_I2C_Init+0x264>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0db      	b.n	8002502 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_I2C_Init+0x268>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a64      	ldr	r2, [pc, #400]	; (800250c <HAL_I2C_Init+0x25c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d802      	bhi.n	8002384 <HAL_I2C_Init+0xd4>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	e009      	b.n	8002398 <HAL_I2C_Init+0xe8>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_I2C_Init+0x26c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4956      	ldr	r1, [pc, #344]	; (800250c <HAL_I2C_Init+0x25c>)
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d80d      	bhi.n	80023d4 <HAL_I2C_Init+0x124>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	bf38      	it	cc
 80023d0:	2304      	movcc	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x150>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x176>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x17e>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1a4>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253a:	f7ff fb7f 	bl	8001c3c <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	f040 80d9 	bne.w	8002700 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2319      	movs	r3, #25
 8002554:	2201      	movs	r2, #1
 8002556:	496d      	ldr	r1, [pc, #436]	; (800270c <HAL_I2C_Mem_Write+0x1ec>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fcbb 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e0cc      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Mem_Write+0x56>
 8002572:	2302      	movs	r3, #2
 8002574:	e0c5      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d007      	beq.n	800259c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2221      	movs	r2, #33	; 0x21
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a3a      	ldr	r2, [r7, #32]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <HAL_I2C_Mem_Write+0x1f0>)
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025de:	88f8      	ldrh	r0, [r7, #6]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4603      	mov	r3, r0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 faf2 	bl	8002bd8 <I2C_RequestMemoryWrite>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d052      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e081      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fd3c 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b04      	cmp	r3, #4
 8002614:	d107      	bne.n	8002626 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06b      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b04      	cmp	r3, #4
 8002666:	d11b      	bne.n	80026a0 <HAL_I2C_Mem_Write+0x180>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1aa      	bne.n	80025fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fd28 	bl	8003102 <I2C_WaitOnBTFFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e016      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	00100002 	.word	0x00100002
 8002710:	ffff0000 	.word	0xffff0000

08002714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002732:	f7ff fa83 	bl	8001c3c <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	f040 823d 	bne.w	8002bc0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2319      	movs	r3, #25
 800274c:	2201      	movs	r2, #1
 800274e:	4981      	ldr	r1, [pc, #516]	; (8002954 <HAL_I2C_Mem_Read+0x240>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fbbf 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	e230      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_I2C_Mem_Read+0x5a>
 800276a:	2302      	movs	r3, #2
 800276c:	e229      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d007      	beq.n	8002794 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2222      	movs	r2, #34	; 0x22
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a61      	ldr	r2, [pc, #388]	; (8002958 <HAL_I2C_Mem_Read+0x244>)
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d6:	88f8      	ldrh	r0, [r7, #6]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4603      	mov	r3, r0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa8c 	bl	8002d04 <I2C_RequestMemoryRead>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1e5      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d113      	bne.n	8002826 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e1b9      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11d      	bne.n	800286a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002866:	b662      	cpsie	i
 8002868:	e197      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b02      	cmp	r3, #2
 8002870:	d11d      	bne.n	80028ae <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002882:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
 80028ac:	e175      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028d4:	e161      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b03      	cmp	r3, #3
 80028dc:	f200 811a 	bhi.w	8002b14 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d123      	bne.n	8002930 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fc49 	bl	8003184 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e162      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292e:	e134      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b02      	cmp	r3, #2
 8002936:	d150      	bne.n	80029da <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	2200      	movs	r2, #0
 8002940:	4906      	ldr	r1, [pc, #24]	; (800295c <HAL_I2C_Mem_Read+0x248>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fac6 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e137      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
 8002952:	bf00      	nop
 8002954:	00100002 	.word	0x00100002
 8002958:	ffff0000 	.word	0xffff0000
 800295c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d8:	e0df      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2200      	movs	r2, #0
 80029e2:	497a      	ldr	r1, [pc, #488]	; (8002bcc <HAL_I2C_Mem_Read+0x4b8>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fa75 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0e6      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a38:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_I2C_Mem_Read+0x4bc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_I2C_Mem_Read+0x4c0>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	0a1a      	lsrs	r2, r3, #8
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00da      	lsls	r2, r3, #3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d117      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a80:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e099      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d1da      	bne.n	8002a52 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ade:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b12:	e042      	b.n	8002b9a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fb33 	bl	8003184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04c      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d118      	bne.n	8002b9a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ae99 	bne.w	80028d6 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3728      	adds	r7, #40	; 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	00010004 	.word	0x00010004
 8002bd0:	20000030 	.word	0x20000030
 8002bd4:	14f8b589 	.word	0x14f8b589

08002bd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f960 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c28:	d103      	bne.n	8002c32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e05f      	b.n	8002cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	492d      	ldr	r1, [pc, #180]	; (8002d00 <I2C_RequestMemoryWrite+0x128>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f998 	bl	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e04c      	b.n	8002cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fa02 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e02b      	b.n	8002cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	e021      	b.n	8002cf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f9dc 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e005      	b.n	8002cf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cea:	893b      	ldrh	r3, [r7, #8]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	00010002 	.word	0x00010002

08002d04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	460b      	mov	r3, r1
 8002d18:	813b      	strh	r3, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f8c2 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d103      	bne.n	8002d6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0aa      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	4952      	ldr	r1, [pc, #328]	; (8002ed0 <I2C_RequestMemoryRead+0x1cc>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f8fa 	bl	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e097      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f964 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e076      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e021      	b.n	8002e30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f93e 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e050      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	6a39      	ldr	r1, [r7, #32]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f923 	bl	8003080 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d107      	bne.n	8002e58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e035      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f82b 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e92:	d103      	bne.n	8002e9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e013      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ea0:	897b      	ldrh	r3, [r7, #10]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	4906      	ldr	r1, [pc, #24]	; (8002ed0 <I2C_RequestMemoryRead+0x1cc>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f863 	bl	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	00010002 	.word	0x00010002

08002ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	e025      	b.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d021      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe fea5 	bl	8001c3c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e023      	b.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10d      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	e00c      	b.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d0b6      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f90:	e051      	b.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d123      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0204 	orr.w	r2, r3, #4
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e046      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d021      	beq.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fe fe23 	bl	8001c3c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e020      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e00b      	b.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d18d      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308c:	e02d      	b.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8ce 	bl	8003230 <I2C_IsAcknowledgeFailed>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e02d      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d021      	beq.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe fdc9 	bl	8001c3c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d1ca      	bne.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310e:	e02d      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f88d 	bl	8003230 <I2C_IsAcknowledgeFailed>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e02d      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d021      	beq.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe fd88 	bl	8001c3c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d116      	bne.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e007      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d1ca      	bne.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003190:	e042      	b.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d119      	bne.n	80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0210 	mvn.w	r2, #16
 80031a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e029      	b.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d4:	f7fe fd32 	bl	8001c3c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e007      	b.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d1b5      	bne.n	8003192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d11b      	bne.n	8003280 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003250:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e26c      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8087 	beq.w	80033ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ac:	4b92      	ldr	r3, [pc, #584]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d00c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b8:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
 80032c4:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d10b      	bne.n	80032ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d2:	4b89      	ldr	r3, [pc, #548]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d06c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x12c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d168      	bne.n	80033b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e246      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x76>
 80032f4:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7f      	ldr	r2, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e02e      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b7b      	ldr	r3, [pc, #492]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b78      	ldr	r3, [pc, #480]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a77      	ldr	r2, [pc, #476]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800331c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e01d      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0xbc>
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a71      	ldr	r2, [pc, #452]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6e      	ldr	r2, [pc, #440]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0xd4>
 8003348:	4b6b      	ldr	r3, [pc, #428]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fc68 	bl	8001c3c <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fc64 	bl	8001c3c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1fa      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0xe4>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fc54 	bl	8001c3c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe fc50 	bl	8001c3c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1e6      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x10c>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c6:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11c      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1ba      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4939      	ldr	r1, [pc, #228]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	e03a      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x270>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fc09 	bl	8001c3c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe fc05 	bl	8001c3c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e19b      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4927      	ldr	r1, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_OscConfig+0x270>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fbe8 	bl	8001c3c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fbe4 	bl	8001c3c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e17a      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03a      	beq.n	8003510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fe fbc8 	bl	8001c3c <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fe fbc4 	bl	8001c3c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e15a      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f000 fada 	bl	8003a88 <RCC_Delay>
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_OscConfig+0x274>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fe fbae 	bl	8001c3c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e2:	e00f      	b.n	8003504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe fbaa 	bl	8001c3c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d908      	bls.n	8003504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e140      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	42420000 	.word	0x42420000
 8003500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b9e      	ldr	r3, [pc, #632]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e9      	bne.n	80034e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a6 	beq.w	800366a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b97      	ldr	r3, [pc, #604]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b94      	ldr	r3, [pc, #592]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4a93      	ldr	r2, [pc, #588]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	61d3      	str	r3, [r2, #28]
 800353a:	4b91      	ldr	r3, [pc, #580]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <HAL_RCC_OscConfig+0x4f8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b8b      	ldr	r3, [pc, #556]	; (8003784 <HAL_RCC_OscConfig+0x4f8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a8a      	ldr	r2, [pc, #552]	; (8003784 <HAL_RCC_OscConfig+0x4f8>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fb6b 	bl	8001c3c <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fb67 	bl	8001c3c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0fd      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b81      	ldr	r3, [pc, #516]	; (8003784 <HAL_RCC_OscConfig+0x4f8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x312>
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e02d      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035a6:	4b76      	ldr	r3, [pc, #472]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a75      	ldr	r2, [pc, #468]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4b73      	ldr	r3, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a72      	ldr	r2, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	e01c      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x356>
 80035c8:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4a6c      	ldr	r2, [pc, #432]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a69      	ldr	r2, [pc, #420]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x36e>
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a66      	ldr	r2, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b64      	ldr	r3, [pc, #400]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003602:	f7fe fb1b 	bl	8001c3c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe fb17 	bl	8001c3c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0ab      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ee      	beq.n	800360a <HAL_RCC_OscConfig+0x37e>
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe fb05 	bl	8001c3c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fb01 	bl	8001c3c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e095      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b48      	ldr	r3, [pc, #288]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a47      	ldr	r2, [pc, #284]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8081 	beq.w	8003776 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d061      	beq.n	8003744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d146      	bne.n	8003716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_OscConfig+0x4fc>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fad5 	bl	8001c3c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fad1 	bl	8001c3c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e067      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	492d      	ldr	r1, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a19      	ldr	r1, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	430b      	orrs	r3, r1
 80036e2:	4927      	ldr	r1, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x4fc>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe faa5 	bl	8001c3c <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe faa1 	bl	8001c3c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e037      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x46a>
 8003714:	e02f      	b.n	8003776 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_RCC_OscConfig+0x4fc>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fa8e 	bl	8001c3c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fa8a 	bl	8001c3c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e020      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x498>
 8003742:	e018      	b.n	8003776 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e013      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	429a      	cmp	r2, r3
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	42420060 	.word	0x42420060

0800378c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0d0      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d910      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4965      	ldr	r1, [pc, #404]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800380a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d040      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d115      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e073      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4936      	ldr	r1, [pc, #216]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fe f9de 	bl	8001c3c <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe f9da 	bl	8001c3c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e053      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d210      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 0207 	bic.w	r2, r3, #7
 80038c2:	4922      	ldr	r1, [pc, #136]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4601      	mov	r1, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	fa21 f303 	lsr.w	r3, r1, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1cc>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe f93c 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40022000 	.word	0x40022000
 8003950:	40021000 	.word	0x40021000
 8003954:	080064ec 	.word	0x080064ec
 8003958:	20000030 	.word	0x20000030
 800395c:	20000034 	.word	0x20000034

08003960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	b490      	push	{r4, r7}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003966:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003968:	1d3c      	adds	r4, r7, #4
 800396a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b04      	cmp	r3, #4
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x40>
 800399a:	2b08      	cmp	r3, #8
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x46>
 800399e:	e02d      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a2:	623b      	str	r3, [r7, #32]
      break;
 80039a4:	e02d      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	0c9b      	lsrs	r3, r3, #18
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039b2:	4413      	add	r3, r2
 80039b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c5b      	lsrs	r3, r3, #17
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039d2:	4413      	add	r3, r2
 80039d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039de:	fb02 f203 	mul.w	r2, r2, r3
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	e004      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	623b      	str	r3, [r7, #32]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039fe:	623b      	str	r3, [r7, #32]
      break;
 8003a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a02:	6a3b      	ldr	r3, [r7, #32]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc90      	pop	{r4, r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	080064d8 	.word	0x080064d8
 8003a14:	080064e8 	.word	0x080064e8
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	007a1200 	.word	0x007a1200
 8003a20:	003d0900 	.word	0x003d0900

08003a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20000030 	.word	0x20000030

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff2 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003a40:	4601      	mov	r1, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	080064fc 	.word	0x080064fc

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a64:	f7ff ffde 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003a68:	4601      	mov	r1, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	0adb      	lsrs	r3, r3, #11
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	080064fc 	.word	0x080064fc

08003a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <RCC_Delay+0x34>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <RCC_Delay+0x38>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0a5b      	lsrs	r3, r3, #9
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa4:	bf00      	nop
  }
  while (Delay --);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	60fa      	str	r2, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f9      	bne.n	8003aa4 <RCC_Delay+0x1c>
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000030 	.word	0x20000030
 8003ac0:	10624dd3 	.word	0x10624dd3

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fed4 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 fc14 	bl	8004330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e03a      	b.n	8003bf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIM_Base_Start_IT+0x98>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x58>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x58>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x58>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d010      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	e007      	b.n	8003bf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800

08003c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fe58 	bl	80018e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fb72 	bl	8004330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start+0x24>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e022      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e015      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e05e      	b.n	8003dd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x92>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start+0xa2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fd68 	bl	8004830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_TIM_PWM_Start+0x138>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_TIM_PWM_Start+0x138>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_TIM_PWM_Start+0x13c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xfa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_TIM_PWM_Start+0x140>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	e007      	b.n	8003dd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800

08003dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0202 	mvn.w	r2, #2
 8003e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa62 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa55 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa64 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0204 	mvn.w	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa38 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa2b 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fa3a 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0208 	mvn.w	r2, #8
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa0e 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa01 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fa10 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9e4 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9d7 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9e6 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0201 	mvn.w	r2, #1
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd f8a0 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fcd5 	bl	8004946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9aa 	bl	800431c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0220 	mvn.w	r2, #32
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fca0 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e0ac      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	f200 809f 	bhi.w	8004164 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004061 	.word	0x08004061
 8004030:	08004165 	.word	0x08004165
 8004034:	08004165 	.word	0x08004165
 8004038:	08004165 	.word	0x08004165
 800403c:	080040a1 	.word	0x080040a1
 8004040:	08004165 	.word	0x08004165
 8004044:	08004165 	.word	0x08004165
 8004048:	08004165 	.word	0x08004165
 800404c:	080040e3 	.word	0x080040e3
 8004050:	08004165 	.word	0x08004165
 8004054:	08004165 	.word	0x08004165
 8004058:	08004165 	.word	0x08004165
 800405c:	08004123 	.word	0x08004123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9c4 	bl	80043f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
      break;
 800409e:	e062      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa0a 	bl	80044c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	021a      	lsls	r2, r3, #8
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
      break;
 80040e0:	e041      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa53 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0208 	orr.w	r2, r2, #8
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0204 	bic.w	r2, r2, #4
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
      break;
 8004120:	e021      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa9d 	bl	8004668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
      break;
 8004162:	e000      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIM_ConfigClockSource+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e0a6      	b.n	80042de <HAL_TIM_ConfigClockSource+0x166>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d067      	beq.n	8004298 <HAL_TIM_ConfigClockSource+0x120>
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d80b      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x6c>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d073      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x140>
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d802      	bhi.n	80041da <HAL_TIM_ConfigClockSource+0x62>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d06f      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041d8:	e078      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d06c      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x140>
 80041de:	2b30      	cmp	r3, #48	; 0x30
 80041e0:	d06a      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041e2:	e073      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041e4:	2b70      	cmp	r3, #112	; 0x70
 80041e6:	d00d      	beq.n	8004204 <HAL_TIM_ConfigClockSource+0x8c>
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d804      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x7e>
 80041ec:	2b50      	cmp	r3, #80	; 0x50
 80041ee:	d033      	beq.n	8004258 <HAL_TIM_ConfigClockSource+0xe0>
 80041f0:	2b60      	cmp	r3, #96	; 0x60
 80041f2:	d041      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041f4:	e06a      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d066      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x152>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d017      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004202:	e063      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f000 faed 	bl	80047f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004226:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
      break;
 8004230:	e04c      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f000 fad6 	bl	80047f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004254:	609a      	str	r2, [r3, #8]
      break;
 8004256:	e039      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	461a      	mov	r2, r3
 8004266:	f000 fa4d 	bl	8004704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2150      	movs	r1, #80	; 0x50
 8004270:	4618      	mov	r0, r3
 8004272:	f000 faa4 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8004276:	e029      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	461a      	mov	r2, r3
 8004286:	f000 fa6b 	bl	8004760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2160      	movs	r1, #96	; 0x60
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fa94 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8004296:	e019      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	461a      	mov	r2, r3
 80042a6:	f000 fa2d 	bl	8004704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fa84 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 80042b6:	e009      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fa7b 	bl	80047be <TIM_ITRx_SetConfig>
        break;
 80042c8:	e000      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
	...

08004330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <TIM_Base_SetConfig+0xb8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x30>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x30>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <TIM_Base_SetConfig+0xbc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x30>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <TIM_Base_SetConfig+0xc0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <TIM_Base_SetConfig+0xb8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_Base_SetConfig+0x62>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d007      	beq.n	8004392 <TIM_Base_SetConfig+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <TIM_Base_SetConfig+0xbc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_Base_SetConfig+0x62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <TIM_Base_SetConfig+0xc0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d108      	bne.n	80043a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <TIM_Base_SetConfig+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800

080043f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0302 	bic.w	r3, r3, #2
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <TIM_OC1_SetConfig+0xc8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10c      	bne.n	800446a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0308 	bic.w	r3, r3, #8
 8004456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <TIM_OC1_SetConfig+0xc8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
}
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00

080044c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0210 	bic.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0320 	bic.w	r3, r3, #32
 800450a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <TIM_OC2_SetConfig+0xd0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10d      	bne.n	800453c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a14      	ldr	r2, [pc, #80]	; (8004590 <TIM_OC2_SetConfig+0xd0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d113      	bne.n	800456c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800454a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	40012c00 	.word	0x40012c00

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <TIM_OC3_SetConfig+0xd0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <TIM_OC3_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d113      	bne.n	800463e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40012c00 	.word	0x40012c00

08004668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <TIM_OC4_SetConfig+0x98>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d109      	bne.n	80046dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00

08004704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 030a 	bic.w	r3, r3, #10
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 0210 	bic.w	r2, r3, #16
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	031b      	lsls	r3, r3, #12
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	431a      	orrs	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4313      	orrs	r3, r2
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e046      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d009      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a10      	ldr	r2, [pc, #64]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10c      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	40012c00 	.word	0x40012c00
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e03f      	b.n	80049ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd f848 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800499a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fbab 	bl	80050f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	4613      	mov	r3, r2
 80049fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d11d      	bne.n	8004a48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_UART_Receive_IT+0x26>
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e016      	b.n	8004a4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Receive_IT+0x38>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e00f      	b.n	8004a4a <HAL_UART_Receive_IT+0x58>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f9d1 	bl	8004de6 <UART_Start_Receive_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x52>
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa81 	bl	8004fa6 <UART_Receive_IT>
      return;
 8004aa4:	e17c      	b.n	8004da0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80b1 	beq.w	8004c10 <HAL_UART_IRQHandler+0x1bc>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x70>
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80a6 	beq.w	8004c10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x90>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_UART_IRQHandler+0xb0>
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0202 	orr.w	r2, r3, #2
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_UART_IRQHandler+0xd0>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f043 0204 	orr.w	r2, r3, #4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00f      	beq.n	8004b4e <HAL_UART_IRQHandler+0xfa>
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_UART_IRQHandler+0xee>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0208 	orr.w	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 811f 	beq.w	8004d96 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_UART_IRQHandler+0x11e>
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa1a 	bl	8004fa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_UART_IRQHandler+0x146>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d031      	beq.n	8004bfe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f95c 	bl	8004e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d023      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_UART_IRQHandler+0x354>)
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd f984 	bl	8001ee0 <HAL_DMA_Abort_IT>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00e      	b.n	8004c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8e5 	bl	8004dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00a      	b.n	8004c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8e1 	bl	8004dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e006      	b.n	8004c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8dd 	bl	8004dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c0a:	e0c4      	b.n	8004d96 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	bf00      	nop
    return;
 8004c0e:	e0c2      	b.n	8004d96 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	f040 80a1 	bne.w	8004d5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 809b 	beq.w	8004d5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8095 	beq.w	8004d5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04e      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004c60:	8a3b      	ldrh	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8099 	beq.w	8004d9a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c6c:	8a3a      	ldrh	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	f080 8093 	bcs.w	8004d9a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8a3a      	ldrh	r2, [r7, #16]
 8004c78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d02b      	beq.n	8004cdc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0210 	bic.w	r2, r2, #16
 8004cd0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd f8c7 	bl	8001e6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f86f 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cf2:	e052      	b.n	8004d9a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d048      	beq.n	8004d9e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d045      	beq.n	8004d9e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0210 	bic.w	r2, r2, #16
 8004d4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d50:	8a7b      	ldrh	r3, [r7, #18]
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f83b 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d5a:	e020      	b.n	8004d9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d008      	beq.n	8004d78 <HAL_UART_IRQHandler+0x324>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8b1 	bl	8004ed8 <UART_Transmit_IT>
    return;
 8004d76:	e013      	b.n	8004da0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x34c>
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8f2 	bl	8004f76 <UART_EndTransmit_IT>
    return;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <HAL_UART_IRQHandler+0x34c>
    return;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d9e:	bf00      	nop
  }
}
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08004eb1 	.word	0x08004eb1

08004dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2222      	movs	r2, #34	; 0x22
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0220 	orr.w	r2, r2, #32
 8004e4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0210 	bic.w	r2, r2, #16
 8004e96:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ff77 	bl	8004dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b21      	cmp	r3, #33	; 0x21
 8004eea:	d13e      	bne.n	8004f6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	d114      	bne.n	8004f20 <UART_Transmit_IT+0x48>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d110      	bne.n	8004f20 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]
 8004f1e:	e008      	b.n	8004f32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6211      	str	r1, [r2, #32]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff08 	bl	8004dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b22      	cmp	r3, #34	; 0x22
 8004fb8:	f040 8099 	bne.w	80050ee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc4:	d117      	bne.n	8004ff6 <UART_Receive_IT+0x50>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d113      	bne.n	8004ff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff4:	e026      	b.n	8005044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d007      	beq.n	800501a <UART_Receive_IT+0x74>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <UART_Receive_IT+0x82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e008      	b.n	800503a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005034:	b2da      	uxtb	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4619      	mov	r1, r3
 8005052:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005054:	2b00      	cmp	r3, #0
 8005056:	d148      	bne.n	80050ea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0220 	bic.w	r2, r2, #32
 8005066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	d123      	bne.n	80050e0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0210 	bic.w	r2, r2, #16
 80050ac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d10a      	bne.n	80050d2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fe79 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
 80050de:	e002      	b.n	80050e6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fb fffd 	bl	80010e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e002      	b.n	80050f0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005132:	f023 030c 	bic.w	r3, r3, #12
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	430b      	orrs	r3, r1
 800513e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2c      	ldr	r2, [pc, #176]	; (800520c <UART_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7fe fc7e 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	e002      	b.n	800516e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7fe fc66 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <UART_SetConfig+0x118>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	0119      	lsls	r1, r3, #4
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009a      	lsls	r2, r3, #2
 8005198:	441a      	add	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <UART_SetConfig+0x118>)
 80051a6:	fba3 0302 	umull	r0, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2064      	movs	r0, #100	; 0x64
 80051ae:	fb00 f303 	mul.w	r3, r0, r3
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	3332      	adds	r3, #50	; 0x32
 80051b8:	4a15      	ldr	r2, [pc, #84]	; (8005210 <UART_SetConfig+0x118>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c4:	4419      	add	r1, r3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <UART_SetConfig+0x118>)
 80051de:	fba3 0302 	umull	r0, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2064      	movs	r0, #100	; 0x64
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3332      	adds	r3, #50	; 0x32
 80051f0:	4a07      	ldr	r2, [pc, #28]	; (8005210 <UART_SetConfig+0x118>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	440a      	add	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40013800 	.word	0x40013800
 8005210:	51eb851f 	.word	0x51eb851f

08005214 <Set_duty>:

#include "motor.h"



static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d111      	bne.n	800524a <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 8005226:	4915      	ldr	r1, [pc, #84]	; (800527c <Set_duty+0x68>)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7fb fd5b 	bl	8000ce4 <__aeabi_fmul>
 800522e:	4603      	mov	r3, r0
 8005230:	4913      	ldr	r1, [pc, #76]	; (8005280 <Set_duty+0x6c>)
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb fc4e 	bl	8000ad4 <__addsf3>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	681c      	ldr	r4, [r3, #0]
 8005240:	4610      	mov	r0, r2
 8005242:	f7fb ff15 	bl	8001070 <__aeabi_f2uiz>
 8005246:	4603      	mov	r3, r0
 8005248:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d111      	bne.n	8005274 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8005250:	490a      	ldr	r1, [pc, #40]	; (800527c <Set_duty+0x68>)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7fb fd46 	bl	8000ce4 <__aeabi_fmul>
 8005258:	4603      	mov	r3, r0
 800525a:	4909      	ldr	r1, [pc, #36]	; (8005280 <Set_duty+0x6c>)
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb fc39 	bl	8000ad4 <__addsf3>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	681c      	ldr	r4, [r3, #0]
 800526a:	4610      	mov	r0, r2
 800526c:	f7fb ff00 	bl	8001070 <__aeabi_f2uiz>
 8005270:	4603      	mov	r3, r0
 8005272:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	bd90      	pop	{r4, r7, pc}
 800527c:	44ed6000 	.word	0x44ed6000
 8005280:	42c80000 	.word	0x42c80000

08005284 <Init_tim_pwm>:

void Init_tim_pwm(){
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005288:	2100      	movs	r1, #0
 800528a:	4808      	ldr	r0, [pc, #32]	; (80052ac <Init_tim_pwm+0x28>)
 800528c:	f7fe fd0c 	bl	8003ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005290:	2104      	movs	r1, #4
 8005292:	4806      	ldr	r0, [pc, #24]	; (80052ac <Init_tim_pwm+0x28>)
 8005294:	f7fe fd08 	bl	8003ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005298:	2100      	movs	r1, #0
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <Init_tim_pwm+0x2c>)
 800529c:	f7fe fd04 	bl	8003ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80052a0:	2104      	movs	r1, #4
 80052a2:	4803      	ldr	r0, [pc, #12]	; (80052b0 <Init_tim_pwm+0x2c>)
 80052a4:	f7fe fd00 	bl	8003ca8 <HAL_TIM_PWM_Start>
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200001f8 	.word	0x200001f8
 80052b0:	2000015c 	.word	0x2000015c

080052b4 <Stop_motor>:

static void Stop_motor(){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
	Set_duty(0, &htim3, 1);
 80052b8:	2201      	movs	r2, #1
 80052ba:	490c      	ldr	r1, [pc, #48]	; (80052ec <Stop_motor+0x38>)
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f7ff ffa8 	bl	8005214 <Set_duty>
	Set_duty(0, &htim3, 2);
 80052c4:	2202      	movs	r2, #2
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <Stop_motor+0x38>)
 80052c8:	f04f 0000 	mov.w	r0, #0
 80052cc:	f7ff ffa2 	bl	8005214 <Set_duty>
	Set_duty(0, &htim4, 1);
 80052d0:	2201      	movs	r2, #1
 80052d2:	4907      	ldr	r1, [pc, #28]	; (80052f0 <Stop_motor+0x3c>)
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f7ff ff9c 	bl	8005214 <Set_duty>
	Set_duty(0, &htim4, 2);
 80052dc:	2202      	movs	r2, #2
 80052de:	4904      	ldr	r1, [pc, #16]	; (80052f0 <Stop_motor+0x3c>)
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f7ff ff96 	bl	8005214 <Set_duty>
}
 80052e8:	bf00      	nop
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200001f8 	.word	0x200001f8
 80052f0:	2000015c 	.word	0x2000015c

080052f4 <Forward>:

void Forward (float duty){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 80052fc:	2201      	movs	r2, #1
 80052fe:	490c      	ldr	r1, [pc, #48]	; (8005330 <Forward+0x3c>)
 8005300:	f04f 0000 	mov.w	r0, #0
 8005304:	f7ff ff86 	bl	8005214 <Set_duty>
	Set_duty(duty, &htim3, 2);
 8005308:	2202      	movs	r2, #2
 800530a:	4909      	ldr	r1, [pc, #36]	; (8005330 <Forward+0x3c>)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff81 	bl	8005214 <Set_duty>
	Set_duty(0, &htim4, 1);
 8005312:	2201      	movs	r2, #1
 8005314:	4907      	ldr	r1, [pc, #28]	; (8005334 <Forward+0x40>)
 8005316:	f04f 0000 	mov.w	r0, #0
 800531a:	f7ff ff7b 	bl	8005214 <Set_duty>
	Set_duty(duty, &htim4, 2);
 800531e:	2202      	movs	r2, #2
 8005320:	4904      	ldr	r1, [pc, #16]	; (8005334 <Forward+0x40>)
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ff76 	bl	8005214 <Set_duty>
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200001f8 	.word	0x200001f8
 8005334:	2000015c 	.word	0x2000015c

08005338 <Reverse>:

void Reverse (float duty){
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 8005340:	2201      	movs	r2, #1
 8005342:	490c      	ldr	r1, [pc, #48]	; (8005374 <Reverse+0x3c>)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff ff65 	bl	8005214 <Set_duty>
	Set_duty(0, &htim3, 2);
 800534a:	2202      	movs	r2, #2
 800534c:	4909      	ldr	r1, [pc, #36]	; (8005374 <Reverse+0x3c>)
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f7ff ff5f 	bl	8005214 <Set_duty>
	Set_duty(duty, &htim4, 1);
 8005356:	2201      	movs	r2, #1
 8005358:	4907      	ldr	r1, [pc, #28]	; (8005378 <Reverse+0x40>)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ff5a 	bl	8005214 <Set_duty>
	Set_duty(0, &htim4, 2);
 8005360:	2202      	movs	r2, #2
 8005362:	4905      	ldr	r1, [pc, #20]	; (8005378 <Reverse+0x40>)
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f7ff ff54 	bl	8005214 <Set_duty>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	200001f8 	.word	0x200001f8
 8005378:	2000015c 	.word	0x2000015c

0800537c <PID_controller>:

void PID_controller(double new_angle, PID_t *pid){
 800537c:	b5b0      	push	{r4, r5, r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
	pid->f_ek 		= new_angle - pid->f_setpoint;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb f843 	bl	8000418 <__aeabi_f2d>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800539e:	f7fa fedb 	bl	8000158 <__aeabi_dsub>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7fb fb3d 	bl	8000a28 <__aeabi_d2f>
 80053ae:	4602      	mov	r2, r0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	619a      	str	r2, [r3, #24]
	pid->f_P_part	= pid->f_Kp*(pid->f_ek-pid->f_ek_1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681c      	ldr	r4, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fb fb84 	bl	8000ad0 <__aeabi_fsub>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4619      	mov	r1, r3
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7fb fc89 	bl	8000ce4 <__aeabi_fmul>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]
	pid->f_I_part	= 0.5*pid->f_Ki*TIME_EXAMPLE*(pid->f_ek+pid->f_ek_1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fb f81a 	bl	8000418 <__aeabi_f2d>
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <PID_controller+0x198>)
 80053ea:	f7fb f86d 	bl	80004c8 <__aeabi_dmul>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	4618      	mov	r0, r3
 80053f4:	4621      	mov	r1, r4
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <PID_controller+0x19c>)
 80053fc:	f7fb f864 	bl	80004c8 <__aeabi_dmul>
 8005400:	4603      	mov	r3, r0
 8005402:	460c      	mov	r4, r1
 8005404:	4625      	mov	r5, r4
 8005406:	461c      	mov	r4, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fb fb5e 	bl	8000ad4 <__addsf3>
 8005418:	4603      	mov	r3, r0
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa fffc 	bl	8000418 <__aeabi_f2d>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fb f84e 	bl	80004c8 <__aeabi_dmul>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4618      	mov	r0, r3
 8005432:	4621      	mov	r1, r4
 8005434:	f7fb faf8 	bl	8000a28 <__aeabi_d2f>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]
	pid->f_D_part	= pid->f_Kd*(pid->f_ek-2*pid->f_ek_1+pid->f_ek_2)/TIME_EXAMPLE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689c      	ldr	r4, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699d      	ldr	r5, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4619      	mov	r1, r3
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb fb41 	bl	8000ad4 <__addsf3>
 8005452:	4603      	mov	r3, r0
 8005454:	4619      	mov	r1, r3
 8005456:	4628      	mov	r0, r5
 8005458:	f7fb fb3a 	bl	8000ad0 <__aeabi_fsub>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7fb fb34 	bl	8000ad4 <__addsf3>
 800546c:	4603      	mov	r3, r0
 800546e:	4619      	mov	r1, r3
 8005470:	4620      	mov	r0, r4
 8005472:	f7fb fc37 	bl	8000ce4 <__aeabi_fmul>
 8005476:	4603      	mov	r3, r0
 8005478:	4928      	ldr	r1, [pc, #160]	; (800551c <PID_controller+0x1a0>)
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb fce6 	bl	8000e4c <__aeabi_fdiv>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	615a      	str	r2, [r3, #20]
	pid->f_uk		= pid->f_uk1 +pid->f_P_part+pid->f_I_part+pid->f_D_part;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7fb fb1e 	bl	8000ad4 <__addsf3>
 8005498:	4603      	mov	r3, r0
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7fb fb16 	bl	8000ad4 <__addsf3>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fb fb0e 	bl	8000ad4 <__addsf3>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24
	if(pid->f_uk> U_MAX)  pid->f_uk = U_MAX;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fdc7 	bl	800105c <__aeabi_fcmpgt>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <PID_controller+0x160>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80054da:	625a      	str	r2, [r3, #36]	; 0x24
	if(pid->f_uk<-U_MAX) pid->f_uk = -U_MAX;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	490f      	ldr	r1, [pc, #60]	; (8005520 <PID_controller+0x1a4>)
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb fd9c 	bl	8001020 <__aeabi_fcmplt>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <PID_controller+0x178>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a0b      	ldr	r2, [pc, #44]	; (8005520 <PID_controller+0x1a4>)
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->f_ek_2		= pid->f_ek_1;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]
	pid->f_ek_1		= pid->f_ek;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	61da      	str	r2, [r3, #28]
	pid->f_uk1		= pid->f_uk;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bdb0      	pop	{r4, r5, r7, pc}
 8005514:	3fe00000 	.word	0x3fe00000
 8005518:	40240000 	.word	0x40240000
 800551c:	41200000 	.word	0x41200000
 8005520:	bf800000 	.word	0xbf800000
 8005524:	00000000 	.word	0x00000000

08005528 <Control_motor>:

void Control_motor(double new_angle, PID_t *pid){
 8005528:	b5b0      	push	{r4, r5, r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
	if((new_angle>ANGLE_THRESHOLD)|(new_angle<(-1)*ANGLE_THRESHOLD)){
 8005534:	2301      	movs	r3, #1
 8005536:	461c      	mov	r4, r3
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <Control_motor+0xc8>)
 800553e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005542:	f7fb fa51 	bl	80009e8 <__aeabi_dcmpgt>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <Control_motor+0x28>
 800554c:	2300      	movs	r3, #0
 800554e:	461c      	mov	r4, r3
 8005550:	b2e4      	uxtb	r4, r4
 8005552:	2301      	movs	r3, #1
 8005554:	461d      	mov	r5, r3
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <Control_motor+0xcc>)
 800555c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005560:	f7fb fa24 	bl	80009ac <__aeabi_dcmplt>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <Control_motor+0x46>
 800556a:	2300      	movs	r3, #0
 800556c:	461d      	mov	r5, r3
 800556e:	b2eb      	uxtb	r3, r5
 8005570:	4323      	orrs	r3, r4
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <Control_motor+0x56>
		Stop_motor();
 8005578:	f7ff fe9c 	bl	80052b4 <Stop_motor>
		return;
 800557c:	e02a      	b.n	80055d4 <Control_motor+0xac>
	}
	if (pid->f_ek >= EPSILON){
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa ff48 	bl	8000418 <__aeabi_f2d>
 8005588:	a315      	add	r3, pc, #84	; (adr r3, 80055e0 <Control_motor+0xb8>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb fa21 	bl	80009d4 <__aeabi_dcmpge>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <Control_motor+0x7c>
		Forward (pid->f_uk);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fea9 	bl	80052f4 <Forward>
		return;
 80055a2:	e017      	b.n	80055d4 <Control_motor+0xac>
	}
	else if (pid->f_ek <= -EPSILON){
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa ff35 	bl	8000418 <__aeabi_f2d>
 80055ae:	a30e      	add	r3, pc, #56	; (adr r3, 80055e8 <Control_motor+0xc0>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fb fa04 	bl	80009c0 <__aeabi_dcmple>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <Control_motor+0xa6>
		Reverse ((-1)*pid->f_uk);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff feb6 	bl	8005338 <Reverse>
		return;
 80055cc:	e002      	b.n	80055d4 <Control_motor+0xac>
	}
	else {
		Stop_motor();
 80055ce:	f7ff fe71 	bl	80052b4 <Stop_motor>
		return;
 80055d2:	bf00      	nop
	}
}
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bdb0      	pop	{r4, r5, r7, pc}
 80055da:	bf00      	nop
 80055dc:	f3af 8000 	nop.w
 80055e0:	33333333 	.word	0x33333333
 80055e4:	3fd33333 	.word	0x3fd33333
 80055e8:	33333333 	.word	0x33333333
 80055ec:	bfd33333 	.word	0xbfd33333
 80055f0:	404e0000 	.word	0x404e0000
 80055f4:	c04e0000 	.word	0xc04e0000

080055f8 <Reset_PID>:

void Reset_PID(PID_t *pid){
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	pid->f_P_part 	= 0.0;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	60da      	str	r2, [r3, #12]
	pid->f_I_part 	= 0.0;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	611a      	str	r2, [r3, #16]
	pid->f_D_part 	= 0.0;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
	pid->f_ek		= 0.0;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
	pid->f_ek_1		= 0.0;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	61da      	str	r2, [r3, #28]
	pid->f_ek_2		= 0.0;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	621a      	str	r2, [r3, #32]
	pid->f_uk		= 0.0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	625a      	str	r2, [r3, #36]	; 0x24
	pid->f_uk1		= 0.0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b088      	sub	sp, #32
 800564e:	af04      	add	r7, sp, #16
 8005650:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8005652:	2364      	movs	r3, #100	; 0x64
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	2301      	movs	r3, #1
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f107 030f 	add.w	r3, r7, #15
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2301      	movs	r3, #1
 8005662:	2275      	movs	r2, #117	; 0x75
 8005664:	21d0      	movs	r1, #208	; 0xd0
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fd f854 	bl	8002714 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b68      	cmp	r3, #104	; 0x68
 8005670:	d13d      	bne.n	80056ee <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8005676:	2364      	movs	r3, #100	; 0x64
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	2301      	movs	r3, #1
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	f107 030e 	add.w	r3, r7, #14
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	2301      	movs	r3, #1
 8005686:	226b      	movs	r2, #107	; 0x6b
 8005688:	21d0      	movs	r1, #208	; 0xd0
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fc ff48 	bl	8002520 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8005690:	2307      	movs	r3, #7
 8005692:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8005694:	2364      	movs	r3, #100	; 0x64
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	2301      	movs	r3, #1
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f107 030e 	add.w	r3, r7, #14
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2301      	movs	r3, #1
 80056a4:	2219      	movs	r2, #25
 80056a6:	21d0      	movs	r1, #208	; 0xd0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fc ff39 	bl	8002520 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80056b2:	2364      	movs	r3, #100	; 0x64
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	2301      	movs	r3, #1
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	f107 030e 	add.w	r3, r7, #14
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	2301      	movs	r3, #1
 80056c2:	221c      	movs	r2, #28
 80056c4:	21d0      	movs	r1, #208	; 0xd0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc ff2a 	bl	8002520 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80056d0:	2364      	movs	r3, #100	; 0x64
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	2301      	movs	r3, #1
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	f107 030e 	add.w	r3, r7, #14
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2301      	movs	r3, #1
 80056e0:	221b      	movs	r2, #27
 80056e2:	21d0      	movs	r1, #208	; 0xd0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fc ff1b 	bl	8002520 <HAL_I2C_Mem_Write>
        return 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <MPU6050_Init+0xa6>
    }
    return 1;
 80056ee:	2301      	movs	r3, #1
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b094      	sub	sp, #80	; 0x50
 80056fe:	af04      	add	r7, sp, #16
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8005704:	2364      	movs	r3, #100	; 0x64
 8005706:	9302      	str	r3, [sp, #8]
 8005708:	230e      	movs	r3, #14
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	2301      	movs	r3, #1
 8005714:	223b      	movs	r2, #59	; 0x3b
 8005716:	21d0      	movs	r1, #208	; 0xd0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fc fffb 	bl	8002714 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800571e:	7a3b      	ldrb	r3, [r7, #8]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	b21a      	sxth	r2, r3
 8005724:	7a7b      	ldrb	r3, [r7, #9]
 8005726:	b21b      	sxth	r3, r3
 8005728:	4313      	orrs	r3, r2
 800572a:	b21a      	sxth	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8005730:	7abb      	ldrb	r3, [r7, #10]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	b21a      	sxth	r2, r3
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	b21b      	sxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b21a      	sxth	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8005742:	7b3b      	ldrb	r3, [r7, #12]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	b21a      	sxth	r2, r3
 8005748:	7b7b      	ldrb	r3, [r7, #13]
 800574a:	b21b      	sxth	r3, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	b21a      	sxth	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	b21b      	sxth	r3, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8005762:	7c3b      	ldrb	r3, [r7, #16]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	b21a      	sxth	r2, r3
 8005768:	7c7b      	ldrb	r3, [r7, #17]
 800576a:	b21b      	sxth	r3, r3
 800576c:	4313      	orrs	r3, r2
 800576e:	b21a      	sxth	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8005774:	7cbb      	ldrb	r3, [r7, #18]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	b21a      	sxth	r2, r3
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	b21b      	sxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b21a      	sxth	r2, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8005786:	7d3b      	ldrb	r3, [r7, #20]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	b21a      	sxth	r2, r3
 800578c:	7d7b      	ldrb	r3, [r7, #21]
 800578e:	b21b      	sxth	r3, r3
 8005790:	4313      	orrs	r3, r2
 8005792:	b21a      	sxth	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe28 	bl	80003f4 <__aeabi_i2d>
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	4bb7      	ldr	r3, [pc, #732]	; (8005a88 <MPU6050_Read_All+0x390>)
 80057aa:	f7fa ffb7 	bl	800071c <__aeabi_ddiv>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fe18 	bl	80003f4 <__aeabi_i2d>
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	4baf      	ldr	r3, [pc, #700]	; (8005a88 <MPU6050_Read_All+0x390>)
 80057ca:	f7fa ffa7 	bl	800071c <__aeabi_ddiv>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fa fe08 	bl	80003f4 <__aeabi_i2d>
 80057e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8005a70 <MPU6050_Read_All+0x378>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f7fa ff97 	bl	800071c <__aeabi_ddiv>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80057f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fb fa1d 	bl	8000c3c <__aeabi_i2f>
 8005802:	4603      	mov	r3, r0
 8005804:	49a1      	ldr	r1, [pc, #644]	; (8005a8c <MPU6050_Read_All+0x394>)
 8005806:	4618      	mov	r0, r3
 8005808:	f7fb fb20 	bl	8000e4c <__aeabi_fdiv>
 800580c:	4603      	mov	r3, r0
 800580e:	49a0      	ldr	r1, [pc, #640]	; (8005a90 <MPU6050_Read_All+0x398>)
 8005810:	4618      	mov	r0, r3
 8005812:	f7fb f95f 	bl	8000ad4 <__addsf3>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005824:	4618      	mov	r0, r3
 8005826:	f7fa fde5 	bl	80003f4 <__aeabi_i2d>
 800582a:	a393      	add	r3, pc, #588	; (adr r3, 8005a78 <MPU6050_Read_All+0x380>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa ff74 	bl	800071c <__aeabi_ddiv>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fdd5 	bl	80003f4 <__aeabi_i2d>
 800584a:	a38b      	add	r3, pc, #556	; (adr r3, 8005a78 <MPU6050_Read_All+0x380>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fa ff64 	bl	800071c <__aeabi_ddiv>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f7fa fdc5 	bl	80003f4 <__aeabi_i2d>
 800586a:	a383      	add	r3, pc, #524	; (adr r3, 8005a78 <MPU6050_Read_All+0x380>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa ff54 	bl	800071c <__aeabi_ddiv>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800587e:	f7fc f9dd 	bl	8001c3c <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <MPU6050_Read_All+0x39c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	4618      	mov	r0, r3
 800588c:	f7fa fda2 	bl	80003d4 <__aeabi_ui2d>
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	4b80      	ldr	r3, [pc, #512]	; (8005a98 <MPU6050_Read_All+0x3a0>)
 8005896:	f7fa ff41 	bl	800071c <__aeabi_ddiv>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80058a2:	f7fc f9cb 	bl	8001c3c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b7a      	ldr	r3, [pc, #488]	; (8005a94 <MPU6050_Read_All+0x39c>)
 80058aa:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058b2:	461a      	mov	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ba:	fb03 f202 	mul.w	r2, r3, r2
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058cc:	fb03 f301 	mul.w	r3, r3, r1
 80058d0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fa fd8e 	bl	80003f4 <__aeabi_i2d>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	f000 fc0e 	bl	8006100 <sqrt>
 80058e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058f4:	f7fb f850 	bl	8000998 <__aeabi_dcmpeq>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d119      	bne.n	8005932 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fa fd75 	bl	80003f4 <__aeabi_i2d>
 800590a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800590e:	f7fa ff05 	bl	800071c <__aeabi_ddiv>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	f000 fa61 	bl	8005de0 <atan>
 800591e:	a358      	add	r3, pc, #352	; (adr r3, 8005a80 <MPU6050_Read_All+0x388>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fdd0 	bl	80004c8 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005930:	e005      	b.n	800593e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005944:	425b      	negs	r3, r3
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fd54 	bl	80003f4 <__aeabi_i2d>
 800594c:	4682      	mov	sl, r0
 800594e:	468b      	mov	fp, r1
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fa fd4c 	bl	80003f4 <__aeabi_i2d>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4650      	mov	r0, sl
 8005962:	4659      	mov	r1, fp
 8005964:	f000 fbca 	bl	80060fc <atan2>
 8005968:	a345      	add	r3, pc, #276	; (adr r3, 8005a80 <MPU6050_Read_All+0x388>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fdab 	bl	80004c8 <__aeabi_dmul>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <MPU6050_Read_All+0x3a4>)
 8005980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005984:	f7fb f812 	bl	80009ac <__aeabi_dcmplt>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <MPU6050_Read_All+0x2ac>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	4b41      	ldr	r3, [pc, #260]	; (8005aa0 <MPU6050_Read_All+0x3a8>)
 800599a:	f7fb f825 	bl	80009e8 <__aeabi_dcmpgt>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d114      	bne.n	80059ce <MPU6050_Read_All+0x2d6>
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <MPU6050_Read_All+0x3a8>)
 80059aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059ae:	f7fb f81b 	bl	80009e8 <__aeabi_dcmpgt>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <MPU6050_Read_All+0x2ec>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <MPU6050_Read_All+0x3a4>)
 80059c4:	f7fa fff2 	bl	80009ac <__aeabi_dcmplt>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80059ce:	4935      	ldr	r1, [pc, #212]	; (8005aa4 <MPU6050_Read_All+0x3ac>)
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80059e2:	e012      	b.n	8005a0a <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80059ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f2:	e9cd 2300 	strd	r2, r3, [sp]
 80059f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059fa:	482a      	ldr	r0, [pc, #168]	; (8005aa4 <MPU6050_Read_All+0x3ac>)
 80059fc:	f000 f856 	bl	8005aac <Kalman_getAngle>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a10:	4690      	mov	r8, r2
 8005a12:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <MPU6050_Read_All+0x3a8>)
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fa ffe2 	bl	80009e8 <__aeabi_dcmpgt>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005a30:	4614      	mov	r4, r2
 8005a32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005a42:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005a46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005a4a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005a4e:	e9cd 3400 	strd	r3, r4, [sp]
 8005a52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a56:	4814      	ldr	r0, [pc, #80]	; (8005aa8 <MPU6050_Read_All+0x3b0>)
 8005a58:	f000 f828 	bl	8005aac <Kalman_getAngle>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 8005a66:	bf00      	nop
 8005a68:	3740      	adds	r7, #64	; 0x40
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a70:	00000000 	.word	0x00000000
 8005a74:	40cc2900 	.word	0x40cc2900
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	40606000 	.word	0x40606000
 8005a80:	1a63c1f8 	.word	0x1a63c1f8
 8005a84:	404ca5dc 	.word	0x404ca5dc
 8005a88:	40d00000 	.word	0x40d00000
 8005a8c:	43aa0000 	.word	0x43aa0000
 8005a90:	42121eb8 	.word	0x42121eb8
 8005a94:	20000334 	.word	0x20000334
 8005a98:	408f4000 	.word	0x408f4000
 8005a9c:	c0568000 	.word	0xc0568000
 8005aa0:	40568000 	.word	0x40568000
 8005aa4:	20000088 	.word	0x20000088
 8005aa8:	20000040 	.word	0x20000040

08005aac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8005aac:	b5b0      	push	{r4, r5, r7, lr}
 8005aae:	b092      	sub	sp, #72	; 0x48
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f103 0420 	add.w	r4, r3, #32
 8005abe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005aca:	f7fa fb45 	bl	8000158 <__aeabi_dsub>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005adc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ae0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ae4:	f7fa fcf0 	bl	80004c8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa fb34 	bl	800015c <__adddf3>
 8005af4:	4603      	mov	r3, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005b0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b0e:	f7fa fcdb 	bl	80004c8 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4610      	mov	r0, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005b20:	f7fa fb1a 	bl	8000158 <__aeabi_dsub>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005b32:	f7fa fb11 	bl	8000158 <__aeabi_dsub>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fb0a 	bl	800015c <__adddf3>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b54:	f7fa fcb8 	bl	80004c8 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa fafc 	bl	800015c <__adddf3>
 8005b64:	4603      	mov	r3, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005b7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b7e:	f7fa fca3 	bl	80004c8 <__aeabi_dmul>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa fae5 	bl	8000158 <__aeabi_dsub>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005ba4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ba8:	f7fa fc8e 	bl	80004c8 <__aeabi_dmul>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7fa fad0 	bl	8000158 <__aeabi_dsub>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005bd2:	f7fa fc79 	bl	80004c8 <__aeabi_dmul>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fabd 	bl	800015c <__adddf3>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f103 0410 	add.w	r4, r3, #16
 8005bf8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4623      	mov	r3, r4
 8005c00:	f7fa faac 	bl	800015c <__adddf3>
 8005c04:	4603      	mov	r3, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005c12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c16:	f7fa fd81 	bl	800071c <__aeabi_ddiv>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c2c:	f7fa fd76 	bl	800071c <__aeabi_ddiv>
 8005c30:	4603      	mov	r3, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f103 0418 	add.w	r4, r3, #24
 8005c3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005c42:	461a      	mov	r2, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4a:	f7fa fa85 	bl	8000158 <__aeabi_dsub>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005c5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c64:	f7fa fc30 	bl	80004c8 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fa74 	bl	800015c <__adddf3>
 8005c74:	4603      	mov	r3, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005c84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c8c:	f7fa fc1c 	bl	80004c8 <__aeabi_dmul>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa fa60 	bl	800015c <__adddf3>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8005cac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005cb0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005cba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005cbe:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cd0:	f7fa fbfa 	bl	80004c8 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fa3c 	bl	8000158 <__aeabi_dsub>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005cf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf8:	f7fa fbe6 	bl	80004c8 <__aeabi_dmul>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4620      	mov	r0, r4
 8005d02:	4629      	mov	r1, r5
 8005d04:	f7fa fa28 	bl	8000158 <__aeabi_dsub>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005d18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d20:	f7fa fbd2 	bl	80004c8 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	f7fa fa14 	bl	8000158 <__aeabi_dsub>
 8005d30:	4603      	mov	r3, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d48:	f7fa fbbe 	bl	80004c8 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4620      	mov	r0, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fa00 	bl	8000158 <__aeabi_dsub>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f103 0418 	add.w	r4, r3, #24
 8005d68:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4621      	mov	r1, r4
 8005d70:	3748      	adds	r7, #72	; 0x48
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	200000d0 	.word	0x200000d0

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	2500      	movs	r5, #0
 8005d88:	4e0c      	ldr	r6, [pc, #48]	; (8005dbc <__libc_init_array+0x38>)
 8005d8a:	4c0d      	ldr	r4, [pc, #52]	; (8005dc0 <__libc_init_array+0x3c>)
 8005d8c:	1ba4      	subs	r4, r4, r6
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	f000 fb94 	bl	80064c0 <_init>
 8005d98:	2500      	movs	r5, #0
 8005d9a:	4e0a      	ldr	r6, [pc, #40]	; (8005dc4 <__libc_init_array+0x40>)
 8005d9c:	4c0a      	ldr	r4, [pc, #40]	; (8005dc8 <__libc_init_array+0x44>)
 8005d9e:	1ba4      	subs	r4, r4, r6
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	42a5      	cmp	r5, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dac:	4798      	blx	r3
 8005dae:	3501      	adds	r5, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db6:	4798      	blx	r3
 8005db8:	3501      	adds	r5, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	08006550 	.word	0x08006550
 8005dc0:	08006550 	.word	0x08006550
 8005dc4:	08006550 	.word	0x08006550
 8005dc8:	08006554 	.word	0x08006554

08005dcc <memset>:
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4402      	add	r2, r0
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d100      	bne.n	8005dd6 <memset+0xa>
 8005dd4:	4770      	bx	lr
 8005dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dda:	e7f9      	b.n	8005dd0 <memset+0x4>
 8005ddc:	0000      	movs	r0, r0
	...

08005de0 <atan>:
 8005de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	4bb6      	ldr	r3, [pc, #728]	; (80060c0 <atan+0x2e0>)
 8005de6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dea:	429e      	cmp	r6, r3
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	468b      	mov	fp, r1
 8005df2:	dd17      	ble.n	8005e24 <atan+0x44>
 8005df4:	4bb3      	ldr	r3, [pc, #716]	; (80060c4 <atan+0x2e4>)
 8005df6:	429e      	cmp	r6, r3
 8005df8:	dc01      	bgt.n	8005dfe <atan+0x1e>
 8005dfa:	d109      	bne.n	8005e10 <atan+0x30>
 8005dfc:	b140      	cbz	r0, 8005e10 <atan+0x30>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa f9a9 	bl	800015c <__adddf3>
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	460d      	mov	r5, r1
 8005e0e:	e005      	b.n	8005e1c <atan+0x3c>
 8005e10:	f1bb 0f00 	cmp.w	fp, #0
 8005e14:	4cac      	ldr	r4, [pc, #688]	; (80060c8 <atan+0x2e8>)
 8005e16:	f340 8121 	ble.w	800605c <atan+0x27c>
 8005e1a:	4dac      	ldr	r5, [pc, #688]	; (80060cc <atan+0x2ec>)
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e24:	4baa      	ldr	r3, [pc, #680]	; (80060d0 <atan+0x2f0>)
 8005e26:	429e      	cmp	r6, r3
 8005e28:	dc11      	bgt.n	8005e4e <atan+0x6e>
 8005e2a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005e2e:	429e      	cmp	r6, r3
 8005e30:	dc0a      	bgt.n	8005e48 <atan+0x68>
 8005e32:	a38b      	add	r3, pc, #556	; (adr r3, 8006060 <atan+0x280>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa f990 	bl	800015c <__adddf3>
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4ba5      	ldr	r3, [pc, #660]	; (80060d4 <atan+0x2f4>)
 8005e40:	f7fa fdd2 	bl	80009e8 <__aeabi_dcmpgt>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1e9      	bne.n	8005e1c <atan+0x3c>
 8005e48:	f04f 3aff 	mov.w	sl, #4294967295
 8005e4c:	e027      	b.n	8005e9e <atan+0xbe>
 8005e4e:	f000 f951 	bl	80060f4 <fabs>
 8005e52:	4ba1      	ldr	r3, [pc, #644]	; (80060d8 <atan+0x2f8>)
 8005e54:	4604      	mov	r4, r0
 8005e56:	429e      	cmp	r6, r3
 8005e58:	460d      	mov	r5, r1
 8005e5a:	f300 80b8 	bgt.w	8005fce <atan+0x1ee>
 8005e5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005e62:	429e      	cmp	r6, r3
 8005e64:	f300 809c 	bgt.w	8005fa0 <atan+0x1c0>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	f7fa f976 	bl	800015c <__adddf3>
 8005e70:	2200      	movs	r2, #0
 8005e72:	4b98      	ldr	r3, [pc, #608]	; (80060d4 <atan+0x2f4>)
 8005e74:	f7fa f970 	bl	8000158 <__aeabi_dsub>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa f969 	bl	800015c <__adddf3>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fc43 	bl	800071c <__aeabi_ddiv>
 8005e96:	f04f 0a00 	mov.w	sl, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa fb0f 	bl	80004c8 <__aeabi_dmul>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4680      	mov	r8, r0
 8005eb0:	4689      	mov	r9, r1
 8005eb2:	f7fa fb09 	bl	80004c8 <__aeabi_dmul>
 8005eb6:	a36c      	add	r3, pc, #432	; (adr r3, 8006068 <atan+0x288>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	460f      	mov	r7, r1
 8005ec0:	f7fa fb02 	bl	80004c8 <__aeabi_dmul>
 8005ec4:	a36a      	add	r3, pc, #424	; (adr r3, 8006070 <atan+0x290>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f947 	bl	800015c <__adddf3>
 8005ece:	4632      	mov	r2, r6
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	f7fa faf9 	bl	80004c8 <__aeabi_dmul>
 8005ed6:	a368      	add	r3, pc, #416	; (adr r3, 8006078 <atan+0x298>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f93e 	bl	800015c <__adddf3>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	f7fa faf0 	bl	80004c8 <__aeabi_dmul>
 8005ee8:	a365      	add	r3, pc, #404	; (adr r3, 8006080 <atan+0x2a0>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f935 	bl	800015c <__adddf3>
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	f7fa fae7 	bl	80004c8 <__aeabi_dmul>
 8005efa:	a363      	add	r3, pc, #396	; (adr r3, 8006088 <atan+0x2a8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f92c 	bl	800015c <__adddf3>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	f7fa fade 	bl	80004c8 <__aeabi_dmul>
 8005f0c:	a360      	add	r3, pc, #384	; (adr r3, 8006090 <atan+0x2b0>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f923 	bl	800015c <__adddf3>
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	f7fa fad5 	bl	80004c8 <__aeabi_dmul>
 8005f1e:	a35e      	add	r3, pc, #376	; (adr r3, 8006098 <atan+0x2b8>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	4680      	mov	r8, r0
 8005f26:	4689      	mov	r9, r1
 8005f28:	4630      	mov	r0, r6
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa facc 	bl	80004c8 <__aeabi_dmul>
 8005f30:	a35b      	add	r3, pc, #364	; (adr r3, 80060a0 <atan+0x2c0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f90f 	bl	8000158 <__aeabi_dsub>
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	f7fa fac3 	bl	80004c8 <__aeabi_dmul>
 8005f42:	a359      	add	r3, pc, #356	; (adr r3, 80060a8 <atan+0x2c8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f906 	bl	8000158 <__aeabi_dsub>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	f7fa faba 	bl	80004c8 <__aeabi_dmul>
 8005f54:	a356      	add	r3, pc, #344	; (adr r3, 80060b0 <atan+0x2d0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa f8fd 	bl	8000158 <__aeabi_dsub>
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463b      	mov	r3, r7
 8005f62:	f7fa fab1 	bl	80004c8 <__aeabi_dmul>
 8005f66:	a354      	add	r3, pc, #336	; (adr r3, 80060b8 <atan+0x2d8>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f8f4 	bl	8000158 <__aeabi_dsub>
 8005f70:	4632      	mov	r2, r6
 8005f72:	463b      	mov	r3, r7
 8005f74:	f7fa faa8 	bl	80004c8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4649      	mov	r1, r9
 8005f80:	f7fa f8ec 	bl	800015c <__adddf3>
 8005f84:	4622      	mov	r2, r4
 8005f86:	462b      	mov	r3, r5
 8005f88:	f7fa fa9e 	bl	80004c8 <__aeabi_dmul>
 8005f8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	d144      	bne.n	8006020 <atan+0x240>
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa f8dd 	bl	8000158 <__aeabi_dsub>
 8005f9e:	e734      	b.n	8005e0a <atan+0x2a>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <atan+0x2f4>)
 8005fa4:	f7fa f8d8 	bl	8000158 <__aeabi_dsub>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <atan+0x2f4>)
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa f8d2 	bl	800015c <__adddf3>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa fbac 	bl	800071c <__aeabi_ddiv>
 8005fc4:	f04f 0a01 	mov.w	sl, #1
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	e767      	b.n	8005e9e <atan+0xbe>
 8005fce:	4b43      	ldr	r3, [pc, #268]	; (80060dc <atan+0x2fc>)
 8005fd0:	429e      	cmp	r6, r3
 8005fd2:	dc1a      	bgt.n	800600a <atan+0x22a>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4b42      	ldr	r3, [pc, #264]	; (80060e0 <atan+0x300>)
 8005fd8:	f7fa f8be 	bl	8000158 <__aeabi_dsub>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <atan+0x300>)
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa fa6e 	bl	80004c8 <__aeabi_dmul>
 8005fec:	2200      	movs	r2, #0
 8005fee:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <atan+0x2f4>)
 8005ff0:	f7fa f8b4 	bl	800015c <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa fb8e 	bl	800071c <__aeabi_ddiv>
 8006000:	f04f 0a02 	mov.w	sl, #2
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	e749      	b.n	8005e9e <atan+0xbe>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	2000      	movs	r0, #0
 8006010:	4934      	ldr	r1, [pc, #208]	; (80060e4 <atan+0x304>)
 8006012:	f7fa fb83 	bl	800071c <__aeabi_ddiv>
 8006016:	f04f 0a03 	mov.w	sl, #3
 800601a:	4604      	mov	r4, r0
 800601c:	460d      	mov	r5, r1
 800601e:	e73e      	b.n	8005e9e <atan+0xbe>
 8006020:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <atan+0x308>)
 8006022:	4e32      	ldr	r6, [pc, #200]	; (80060ec <atan+0x30c>)
 8006024:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006028:	4456      	add	r6, sl
 800602a:	449a      	add	sl, r3
 800602c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006030:	f7fa f892 	bl	8000158 <__aeabi_dsub>
 8006034:	4622      	mov	r2, r4
 8006036:	462b      	mov	r3, r5
 8006038:	f7fa f88e 	bl	8000158 <__aeabi_dsub>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006044:	f7fa f888 	bl	8000158 <__aeabi_dsub>
 8006048:	f1bb 0f00 	cmp.w	fp, #0
 800604c:	4604      	mov	r4, r0
 800604e:	460d      	mov	r5, r1
 8006050:	f6bf aee4 	bge.w	8005e1c <atan+0x3c>
 8006054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006058:	461d      	mov	r5, r3
 800605a:	e6df      	b.n	8005e1c <atan+0x3c>
 800605c:	4d24      	ldr	r5, [pc, #144]	; (80060f0 <atan+0x310>)
 800605e:	e6dd      	b.n	8005e1c <atan+0x3c>
 8006060:	8800759c 	.word	0x8800759c
 8006064:	7e37e43c 	.word	0x7e37e43c
 8006068:	e322da11 	.word	0xe322da11
 800606c:	3f90ad3a 	.word	0x3f90ad3a
 8006070:	24760deb 	.word	0x24760deb
 8006074:	3fa97b4b 	.word	0x3fa97b4b
 8006078:	a0d03d51 	.word	0xa0d03d51
 800607c:	3fb10d66 	.word	0x3fb10d66
 8006080:	c54c206e 	.word	0xc54c206e
 8006084:	3fb745cd 	.word	0x3fb745cd
 8006088:	920083ff 	.word	0x920083ff
 800608c:	3fc24924 	.word	0x3fc24924
 8006090:	5555550d 	.word	0x5555550d
 8006094:	3fd55555 	.word	0x3fd55555
 8006098:	2c6a6c2f 	.word	0x2c6a6c2f
 800609c:	bfa2b444 	.word	0xbfa2b444
 80060a0:	52defd9a 	.word	0x52defd9a
 80060a4:	3fadde2d 	.word	0x3fadde2d
 80060a8:	af749a6d 	.word	0xaf749a6d
 80060ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80060b0:	fe231671 	.word	0xfe231671
 80060b4:	3fbc71c6 	.word	0x3fbc71c6
 80060b8:	9998ebc4 	.word	0x9998ebc4
 80060bc:	3fc99999 	.word	0x3fc99999
 80060c0:	440fffff 	.word	0x440fffff
 80060c4:	7ff00000 	.word	0x7ff00000
 80060c8:	54442d18 	.word	0x54442d18
 80060cc:	3ff921fb 	.word	0x3ff921fb
 80060d0:	3fdbffff 	.word	0x3fdbffff
 80060d4:	3ff00000 	.word	0x3ff00000
 80060d8:	3ff2ffff 	.word	0x3ff2ffff
 80060dc:	40037fff 	.word	0x40037fff
 80060e0:	3ff80000 	.word	0x3ff80000
 80060e4:	bff00000 	.word	0xbff00000
 80060e8:	08006528 	.word	0x08006528
 80060ec:	08006508 	.word	0x08006508
 80060f0:	bff921fb 	.word	0xbff921fb

080060f4 <fabs>:
 80060f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060f8:	4619      	mov	r1, r3
 80060fa:	4770      	bx	lr

080060fc <atan2>:
 80060fc:	f000 b854 	b.w	80061a8 <__ieee754_atan2>

08006100 <sqrt>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	b08b      	sub	sp, #44	; 0x2c
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
 800610a:	f000 f92b 	bl	8006364 <__ieee754_sqrt>
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <sqrt+0xa0>)
 8006110:	4680      	mov	r8, r0
 8006112:	f993 a000 	ldrsb.w	sl, [r3]
 8006116:	4689      	mov	r9, r1
 8006118:	f1ba 3fff 	cmp.w	sl, #4294967295
 800611c:	d02b      	beq.n	8006176 <sqrt+0x76>
 800611e:	4622      	mov	r2, r4
 8006120:	462b      	mov	r3, r5
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa fc69 	bl	80009fc <__aeabi_dcmpun>
 800612a:	4683      	mov	fp, r0
 800612c:	bb18      	cbnz	r0, 8006176 <sqrt+0x76>
 800612e:	2600      	movs	r6, #0
 8006130:	2700      	movs	r7, #0
 8006132:	4632      	mov	r2, r6
 8006134:	463b      	mov	r3, r7
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa fc37 	bl	80009ac <__aeabi_dcmplt>
 800613e:	b1d0      	cbz	r0, 8006176 <sqrt+0x76>
 8006140:	2301      	movs	r3, #1
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <sqrt+0xa4>)
 8006146:	f8cd b020 	str.w	fp, [sp, #32]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006150:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006154:	f1ba 0f00 	cmp.w	sl, #0
 8006158:	d112      	bne.n	8006180 <sqrt+0x80>
 800615a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800615e:	4668      	mov	r0, sp
 8006160:	f000 f9ac 	bl	80064bc <matherr>
 8006164:	b1b8      	cbz	r0, 8006196 <sqrt+0x96>
 8006166:	9b08      	ldr	r3, [sp, #32]
 8006168:	b11b      	cbz	r3, 8006172 <sqrt+0x72>
 800616a:	f7ff fe05 	bl	8005d78 <__errno>
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	b00b      	add	sp, #44	; 0x2c
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	4632      	mov	r2, r6
 8006182:	463b      	mov	r3, r7
 8006184:	4630      	mov	r0, r6
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa fac8 	bl	800071c <__aeabi_ddiv>
 800618c:	f1ba 0f02 	cmp.w	sl, #2
 8006190:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006194:	d1e3      	bne.n	800615e <sqrt+0x5e>
 8006196:	f7ff fdef 	bl	8005d78 <__errno>
 800619a:	2321      	movs	r3, #33	; 0x21
 800619c:	6003      	str	r3, [r0, #0]
 800619e:	e7e2      	b.n	8006166 <sqrt+0x66>
 80061a0:	20000134 	.word	0x20000134
 80061a4:	08006548 	.word	0x08006548

080061a8 <__ieee754_atan2>:
 80061a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	4256      	negs	r6, r2
 80061ae:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80061b2:	4316      	orrs	r6, r2
 80061b4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006360 <__ieee754_atan2+0x1b8>
 80061b8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80061bc:	454e      	cmp	r6, r9
 80061be:	4604      	mov	r4, r0
 80061c0:	460d      	mov	r5, r1
 80061c2:	469e      	mov	lr, r3
 80061c4:	d808      	bhi.n	80061d8 <__ieee754_atan2+0x30>
 80061c6:	4246      	negs	r6, r0
 80061c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80061cc:	4306      	orrs	r6, r0
 80061ce:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80061d2:	454e      	cmp	r6, r9
 80061d4:	4688      	mov	r8, r1
 80061d6:	d906      	bls.n	80061e6 <__ieee754_atan2+0x3e>
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7f9 ffbe 	bl	800015c <__adddf3>
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
 80061e4:	e030      	b.n	8006248 <__ieee754_atan2+0xa0>
 80061e6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80061ea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80061ee:	4316      	orrs	r6, r2
 80061f0:	d103      	bne.n	80061fa <__ieee754_atan2+0x52>
 80061f2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f6:	f7ff bdf3 	b.w	8005de0 <atan>
 80061fa:	179e      	asrs	r6, r3, #30
 80061fc:	f006 0602 	and.w	r6, r6, #2
 8006200:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006204:	ea57 0100 	orrs.w	r1, r7, r0
 8006208:	d107      	bne.n	800621a <__ieee754_atan2+0x72>
 800620a:	2e02      	cmp	r6, #2
 800620c:	d079      	beq.n	8006302 <__ieee754_atan2+0x15a>
 800620e:	2e03      	cmp	r6, #3
 8006210:	d11a      	bne.n	8006248 <__ieee754_atan2+0xa0>
 8006212:	a541      	add	r5, pc, #260	; (adr r5, 8006318 <__ieee754_atan2+0x170>)
 8006214:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006218:	e016      	b.n	8006248 <__ieee754_atan2+0xa0>
 800621a:	ea5c 0102 	orrs.w	r1, ip, r2
 800621e:	d106      	bne.n	800622e <__ieee754_atan2+0x86>
 8006220:	f1b8 0f00 	cmp.w	r8, #0
 8006224:	da71      	bge.n	800630a <__ieee754_atan2+0x162>
 8006226:	a53e      	add	r5, pc, #248	; (adr r5, 8006320 <__ieee754_atan2+0x178>)
 8006228:	e9d5 4500 	ldrd	r4, r5, [r5]
 800622c:	e00c      	b.n	8006248 <__ieee754_atan2+0xa0>
 800622e:	45cc      	cmp	ip, r9
 8006230:	d123      	bne.n	800627a <__ieee754_atan2+0xd2>
 8006232:	4567      	cmp	r7, ip
 8006234:	d114      	bne.n	8006260 <__ieee754_atan2+0xb8>
 8006236:	2e02      	cmp	r6, #2
 8006238:	d00a      	beq.n	8006250 <__ieee754_atan2+0xa8>
 800623a:	2e03      	cmp	r6, #3
 800623c:	d00c      	beq.n	8006258 <__ieee754_atan2+0xb0>
 800623e:	2e01      	cmp	r6, #1
 8006240:	d15b      	bne.n	80062fa <__ieee754_atan2+0x152>
 8006242:	a539      	add	r5, pc, #228	; (adr r5, 8006328 <__ieee754_atan2+0x180>)
 8006244:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006250:	a537      	add	r5, pc, #220	; (adr r5, 8006330 <__ieee754_atan2+0x188>)
 8006252:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006256:	e7f7      	b.n	8006248 <__ieee754_atan2+0xa0>
 8006258:	a537      	add	r5, pc, #220	; (adr r5, 8006338 <__ieee754_atan2+0x190>)
 800625a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800625e:	e7f3      	b.n	8006248 <__ieee754_atan2+0xa0>
 8006260:	2e02      	cmp	r6, #2
 8006262:	d04e      	beq.n	8006302 <__ieee754_atan2+0x15a>
 8006264:	2e03      	cmp	r6, #3
 8006266:	d0d4      	beq.n	8006212 <__ieee754_atan2+0x6a>
 8006268:	2e01      	cmp	r6, #1
 800626a:	f04f 0400 	mov.w	r4, #0
 800626e:	d102      	bne.n	8006276 <__ieee754_atan2+0xce>
 8006270:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006274:	e7e8      	b.n	8006248 <__ieee754_atan2+0xa0>
 8006276:	2500      	movs	r5, #0
 8006278:	e7e6      	b.n	8006248 <__ieee754_atan2+0xa0>
 800627a:	454f      	cmp	r7, r9
 800627c:	d0d0      	beq.n	8006220 <__ieee754_atan2+0x78>
 800627e:	eba7 070c 	sub.w	r7, r7, ip
 8006282:	153f      	asrs	r7, r7, #20
 8006284:	2f3c      	cmp	r7, #60	; 0x3c
 8006286:	dc1e      	bgt.n	80062c6 <__ieee754_atan2+0x11e>
 8006288:	2b00      	cmp	r3, #0
 800628a:	da01      	bge.n	8006290 <__ieee754_atan2+0xe8>
 800628c:	373c      	adds	r7, #60	; 0x3c
 800628e:	db1e      	blt.n	80062ce <__ieee754_atan2+0x126>
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa fa42 	bl	800071c <__aeabi_ddiv>
 8006298:	f7ff ff2c 	bl	80060f4 <fabs>
 800629c:	f7ff fda0 	bl	8005de0 <atan>
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	2e01      	cmp	r6, #1
 80062a6:	d015      	beq.n	80062d4 <__ieee754_atan2+0x12c>
 80062a8:	2e02      	cmp	r6, #2
 80062aa:	d017      	beq.n	80062dc <__ieee754_atan2+0x134>
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	d0cb      	beq.n	8006248 <__ieee754_atan2+0xa0>
 80062b0:	a323      	add	r3, pc, #140	; (adr r3, 8006340 <__ieee754_atan2+0x198>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7f9 ff4d 	bl	8000158 <__aeabi_dsub>
 80062be:	a322      	add	r3, pc, #136	; (adr r3, 8006348 <__ieee754_atan2+0x1a0>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	e016      	b.n	80062f4 <__ieee754_atan2+0x14c>
 80062c6:	a522      	add	r5, pc, #136	; (adr r5, 8006350 <__ieee754_atan2+0x1a8>)
 80062c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062cc:	e7ea      	b.n	80062a4 <__ieee754_atan2+0xfc>
 80062ce:	2400      	movs	r4, #0
 80062d0:	2500      	movs	r5, #0
 80062d2:	e7e7      	b.n	80062a4 <__ieee754_atan2+0xfc>
 80062d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062d8:	461d      	mov	r5, r3
 80062da:	e7b5      	b.n	8006248 <__ieee754_atan2+0xa0>
 80062dc:	a318      	add	r3, pc, #96	; (adr r3, 8006340 <__ieee754_atan2+0x198>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ff37 	bl	8000158 <__aeabi_dsub>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	a116      	add	r1, pc, #88	; (adr r1, 8006348 <__ieee754_atan2+0x1a0>)
 80062f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f4:	f7f9 ff30 	bl	8000158 <__aeabi_dsub>
 80062f8:	e772      	b.n	80061e0 <__ieee754_atan2+0x38>
 80062fa:	a517      	add	r5, pc, #92	; (adr r5, 8006358 <__ieee754_atan2+0x1b0>)
 80062fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006300:	e7a2      	b.n	8006248 <__ieee754_atan2+0xa0>
 8006302:	a511      	add	r5, pc, #68	; (adr r5, 8006348 <__ieee754_atan2+0x1a0>)
 8006304:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006308:	e79e      	b.n	8006248 <__ieee754_atan2+0xa0>
 800630a:	a511      	add	r5, pc, #68	; (adr r5, 8006350 <__ieee754_atan2+0x1a8>)
 800630c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006310:	e79a      	b.n	8006248 <__ieee754_atan2+0xa0>
 8006312:	bf00      	nop
 8006314:	f3af 8000 	nop.w
 8006318:	54442d18 	.word	0x54442d18
 800631c:	c00921fb 	.word	0xc00921fb
 8006320:	54442d18 	.word	0x54442d18
 8006324:	bff921fb 	.word	0xbff921fb
 8006328:	54442d18 	.word	0x54442d18
 800632c:	bfe921fb 	.word	0xbfe921fb
 8006330:	7f3321d2 	.word	0x7f3321d2
 8006334:	4002d97c 	.word	0x4002d97c
 8006338:	7f3321d2 	.word	0x7f3321d2
 800633c:	c002d97c 	.word	0xc002d97c
 8006340:	33145c07 	.word	0x33145c07
 8006344:	3ca1a626 	.word	0x3ca1a626
 8006348:	54442d18 	.word	0x54442d18
 800634c:	400921fb 	.word	0x400921fb
 8006350:	54442d18 	.word	0x54442d18
 8006354:	3ff921fb 	.word	0x3ff921fb
 8006358:	54442d18 	.word	0x54442d18
 800635c:	3fe921fb 	.word	0x3fe921fb
 8006360:	7ff00000 	.word	0x7ff00000

08006364 <__ieee754_sqrt>:
 8006364:	4b54      	ldr	r3, [pc, #336]	; (80064b8 <__ieee754_sqrt+0x154>)
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636a:	438b      	bics	r3, r1
 800636c:	4606      	mov	r6, r0
 800636e:	460d      	mov	r5, r1
 8006370:	460a      	mov	r2, r1
 8006372:	460c      	mov	r4, r1
 8006374:	d10f      	bne.n	8006396 <__ieee754_sqrt+0x32>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	f7fa f8a5 	bl	80004c8 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4630      	mov	r0, r6
 8006384:	4629      	mov	r1, r5
 8006386:	f7f9 fee9 	bl	800015c <__adddf3>
 800638a:	4606      	mov	r6, r0
 800638c:	460d      	mov	r5, r1
 800638e:	4630      	mov	r0, r6
 8006390:	4629      	mov	r1, r5
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006396:	2900      	cmp	r1, #0
 8006398:	4607      	mov	r7, r0
 800639a:	4603      	mov	r3, r0
 800639c:	dc0e      	bgt.n	80063bc <__ieee754_sqrt+0x58>
 800639e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80063a2:	ea5c 0707 	orrs.w	r7, ip, r7
 80063a6:	d0f2      	beq.n	800638e <__ieee754_sqrt+0x2a>
 80063a8:	b141      	cbz	r1, 80063bc <__ieee754_sqrt+0x58>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	f7f9 fed3 	bl	8000158 <__aeabi_dsub>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	f7fa f9b1 	bl	800071c <__aeabi_ddiv>
 80063ba:	e7e6      	b.n	800638a <__ieee754_sqrt+0x26>
 80063bc:	1512      	asrs	r2, r2, #20
 80063be:	d074      	beq.n	80064aa <__ieee754_sqrt+0x146>
 80063c0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80063c4:	07d5      	lsls	r5, r2, #31
 80063c6:	f04f 0500 	mov.w	r5, #0
 80063ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063ce:	bf48      	it	mi
 80063d0:	0fd9      	lsrmi	r1, r3, #31
 80063d2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80063d6:	bf44      	itt	mi
 80063d8:	005b      	lslmi	r3, r3, #1
 80063da:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80063de:	1051      	asrs	r1, r2, #1
 80063e0:	0fda      	lsrs	r2, r3, #31
 80063e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80063e6:	4628      	mov	r0, r5
 80063e8:	2216      	movs	r2, #22
 80063ea:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	1987      	adds	r7, r0, r6
 80063f2:	42a7      	cmp	r7, r4
 80063f4:	bfde      	ittt	le
 80063f6:	19b8      	addle	r0, r7, r6
 80063f8:	1be4      	suble	r4, r4, r7
 80063fa:	19ad      	addle	r5, r5, r6
 80063fc:	0fdf      	lsrs	r7, r3, #31
 80063fe:	3a01      	subs	r2, #1
 8006400:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006404:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006408:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800640c:	d1f0      	bne.n	80063f0 <__ieee754_sqrt+0x8c>
 800640e:	f04f 0c20 	mov.w	ip, #32
 8006412:	4696      	mov	lr, r2
 8006414:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006418:	4284      	cmp	r4, r0
 800641a:	eb06 070e 	add.w	r7, r6, lr
 800641e:	dc02      	bgt.n	8006426 <__ieee754_sqrt+0xc2>
 8006420:	d112      	bne.n	8006448 <__ieee754_sqrt+0xe4>
 8006422:	429f      	cmp	r7, r3
 8006424:	d810      	bhi.n	8006448 <__ieee754_sqrt+0xe4>
 8006426:	2f00      	cmp	r7, #0
 8006428:	eb07 0e06 	add.w	lr, r7, r6
 800642c:	da42      	bge.n	80064b4 <__ieee754_sqrt+0x150>
 800642e:	f1be 0f00 	cmp.w	lr, #0
 8006432:	db3f      	blt.n	80064b4 <__ieee754_sqrt+0x150>
 8006434:	f100 0801 	add.w	r8, r0, #1
 8006438:	1a24      	subs	r4, r4, r0
 800643a:	4640      	mov	r0, r8
 800643c:	429f      	cmp	r7, r3
 800643e:	bf88      	it	hi
 8006440:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006444:	1bdb      	subs	r3, r3, r7
 8006446:	4432      	add	r2, r6
 8006448:	0064      	lsls	r4, r4, #1
 800644a:	f1bc 0c01 	subs.w	ip, ip, #1
 800644e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006452:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800645a:	d1dd      	bne.n	8006418 <__ieee754_sqrt+0xb4>
 800645c:	4323      	orrs	r3, r4
 800645e:	d006      	beq.n	800646e <__ieee754_sqrt+0x10a>
 8006460:	1c54      	adds	r4, r2, #1
 8006462:	bf0b      	itete	eq
 8006464:	4662      	moveq	r2, ip
 8006466:	3201      	addne	r2, #1
 8006468:	3501      	addeq	r5, #1
 800646a:	f022 0201 	bicne.w	r2, r2, #1
 800646e:	106b      	asrs	r3, r5, #1
 8006470:	0852      	lsrs	r2, r2, #1
 8006472:	07e8      	lsls	r0, r5, #31
 8006474:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006478:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800647c:	bf48      	it	mi
 800647e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006482:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006486:	4616      	mov	r6, r2
 8006488:	e781      	b.n	800638e <__ieee754_sqrt+0x2a>
 800648a:	0adc      	lsrs	r4, r3, #11
 800648c:	3915      	subs	r1, #21
 800648e:	055b      	lsls	r3, r3, #21
 8006490:	2c00      	cmp	r4, #0
 8006492:	d0fa      	beq.n	800648a <__ieee754_sqrt+0x126>
 8006494:	02e6      	lsls	r6, r4, #11
 8006496:	d50a      	bpl.n	80064ae <__ieee754_sqrt+0x14a>
 8006498:	f1c2 0020 	rsb	r0, r2, #32
 800649c:	fa23 f000 	lsr.w	r0, r3, r0
 80064a0:	1e55      	subs	r5, r2, #1
 80064a2:	4093      	lsls	r3, r2
 80064a4:	4304      	orrs	r4, r0
 80064a6:	1b4a      	subs	r2, r1, r5
 80064a8:	e78a      	b.n	80063c0 <__ieee754_sqrt+0x5c>
 80064aa:	4611      	mov	r1, r2
 80064ac:	e7f0      	b.n	8006490 <__ieee754_sqrt+0x12c>
 80064ae:	0064      	lsls	r4, r4, #1
 80064b0:	3201      	adds	r2, #1
 80064b2:	e7ef      	b.n	8006494 <__ieee754_sqrt+0x130>
 80064b4:	4680      	mov	r8, r0
 80064b6:	e7bf      	b.n	8006438 <__ieee754_sqrt+0xd4>
 80064b8:	7ff00000 	.word	0x7ff00000

080064bc <matherr>:
 80064bc:	2000      	movs	r0, #0
 80064be:	4770      	bx	lr

080064c0 <_init>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr

080064cc <_fini>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr
